{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/ngx-masonry/fesm5/ngx-masonry.js"],"names":[],"mappings":"AAAA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAwHsC,AAK3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;8GAGiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAsCU,AAG3B;;;;;;;;;;;;;;;;;;oIAKiB;;;;;;KAMvB;;;;;;;;;;;;;qKAOoB","file":"ngx-masonry.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { Input, Output, EventEmitter, Component, Inject, PLATFORM_ID, ElementRef, Directive, forwardRef, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nvar imagesLoaded;\nvar masonryConstructor;\nvar NgxMasonryComponent = /** @class */ (function () {\n    function NgxMasonryComponent(platformId, _element) {\n        this.platformId = platformId;\n        this._element = _element;\n        this.useImagesLoaded = false;\n        this.updateLayout = false;\n        // Outputs\n        this.layoutComplete = new EventEmitter();\n        this.removeComplete = new EventEmitter();\n    }\n    NgxMasonryComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.useImagesLoaded && imagesLoaded === undefined) {\n            imagesLoaded = require('imagesloaded');\n        }\n        if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n            masonryConstructor = require('masonry-layout');\n        }\n        // Create masonry options object\n        if (!this.options) {\n            this.options = {};\n        }\n        // Set default itemSelector\n        if (!this.options.itemSelector) {\n            this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            // Initialize Masonry\n            this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n            // Bind to events\n            this._msnry.on('layoutComplete', function (items) {\n                _this.layoutComplete.emit(items);\n            });\n            this._msnry.on('removeComplete', function (items) {\n                _this.removeComplete.emit(items);\n            });\n        }\n    };\n    NgxMasonryComponent.prototype.ngOnChanges = function (changes) {\n        // only update layout if it's not the first change\n        if (changes.updateLayout) {\n            if (!changes.updateLayout.firstChange) {\n                this.layout();\n            }\n        }\n    };\n    NgxMasonryComponent.prototype.ngOnDestroy = function () {\n        if (this._msnry) {\n            this._msnry.destroy();\n        }\n    };\n    NgxMasonryComponent.prototype.layout = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this._msnry.layout();\n        });\n    };\n    NgxMasonryComponent.prototype.reloadItems = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this._msnry.reloadItems();\n        });\n    };\n    // public add(element: HTMLElement, prepend: boolean = false) {\n    NgxMasonryComponent.prototype.add = function (element) {\n        var _this = this;\n        var isFirstItem = false;\n        // Check if first item\n        if (this._msnry.items.length === 0) {\n            isFirstItem = true;\n        }\n        if (this.useImagesLoaded) {\n            imagesLoaded(element, function (instance) {\n                _this._element.nativeElement.appendChild(element);\n                // Tell Masonry that a child element has been added\n                _this._msnry.appended(element);\n                // layout if first item\n                if (isFirstItem) {\n                    _this.layout();\n                }\n            });\n            this._element.nativeElement.removeChild(element);\n        }\n        else {\n            // Tell Masonry that a child element has been added\n            this._msnry.appended(element);\n            // layout if first item\n            if (isFirstItem) {\n                this.layout();\n            }\n        }\n    };\n    NgxMasonryComponent.prototype.remove = function (element) {\n        // Tell Masonry that a child element has been removed\n        this._msnry.remove(element);\n        // Layout items\n        this.layout();\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], NgxMasonryComponent.prototype, \"options\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NgxMasonryComponent.prototype, \"useImagesLoaded\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NgxMasonryComponent.prototype, \"updateLayout\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], NgxMasonryComponent.prototype, \"layoutComplete\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], NgxMasonryComponent.prototype, \"removeComplete\", void 0);\n    NgxMasonryComponent = __decorate([\n        Component({\n            selector: '[ngx-masonry], ngx-masonry',\n            template: '<ng-content></ng-content>',\n            styles: [\"\\n\\t\\t:host {\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\\n\\t\"]\n        }),\n        __param(0, Inject(PLATFORM_ID)),\n        __metadata(\"design:paramtypes\", [Object, ElementRef])\n    ], NgxMasonryComponent);\n    return NgxMasonryComponent;\n}());\n\nvar NgxMasonryDirective = /** @class */ (function () {\n    function NgxMasonryDirective(_element, _parent, platformId) {\n        this._element = _element;\n        this._parent = _parent;\n        this.platformId = platformId;\n    }\n    NgxMasonryDirective.prototype.ngAfterViewInit = function () {\n        if (isPlatformBrowser(this.platformId)) {\n            this._parent.add(this._element.nativeElement);\n            this.watchForHtmlChanges();\n        }\n    };\n    NgxMasonryDirective.prototype.ngOnDestroy = function () {\n        if (isPlatformBrowser(this.platformId)) {\n            this._parent.remove(this._element.nativeElement);\n        }\n    };\n    /** When HTML in brick changes dinamically, observe that and change layout */\n    NgxMasonryDirective.prototype.watchForHtmlChanges = function () {\n        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n        if (MutationObserver) {\n            /** Watch for any changes to subtree */\n            var self_1 = this;\n            var observer = new MutationObserver(function (mutations, observerFromElement) {\n                self_1._parent.layout();\n            });\n            // define what element should be observed by the observer\n            // and what types of mutations trigger the callback\n            observer.observe(this._element.nativeElement, {\n                subtree: true,\n                childList: true\n            });\n        }\n    };\n    NgxMasonryDirective = __decorate([\n        Directive({\n            selector: '[ngxMasonryItem], ngxMasonryItem'\n        }),\n        __param(1, Inject(forwardRef(function () { return NgxMasonryComponent; }))),\n        __param(2, Inject(PLATFORM_ID)),\n        __metadata(\"design:paramtypes\", [ElementRef,\n            NgxMasonryComponent, Object])\n    ], NgxMasonryDirective);\n    return NgxMasonryDirective;\n}());\n\nvar NgxMasonryModule = /** @class */ (function () {\n    function NgxMasonryModule() {\n    }\n    NgxMasonryModule = __decorate([\n        NgModule({\n            imports: [],\n            declarations: [NgxMasonryComponent, NgxMasonryDirective],\n            exports: [NgxMasonryComponent, NgxMasonryDirective]\n        })\n    ], NgxMasonryModule);\n    return NgxMasonryModule;\n}());\n\nexport { NgxMasonryComponent, NgxMasonryDirective, NgxMasonryModule };\n"]}