{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/ngx-masonry/fesm2015/ngx-masonry.js"],"names":[],"mappings":"AAAA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8GAgGC;;;;;;;;;;;;;;;;;;;;;kCAqBiC,AAS3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qJAuCN;kCACiC,AAG3B;;;;;;;;;;;;;;;;;;;;;qKAQN,CAAC,AAOmB","file":"ngx-masonry.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { EventEmitter, Input, Output, Component, Inject, PLATFORM_ID, ElementRef, Directive, forwardRef, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nlet imagesLoaded;\nlet masonryConstructor;\nlet NgxMasonryComponent = class NgxMasonryComponent {\n    constructor(platformId, _element) {\n        this.platformId = platformId;\n        this._element = _element;\n        this.useImagesLoaded = false;\n        this.updateLayout = false;\n        // Outputs\n        this.layoutComplete = new EventEmitter();\n        this.removeComplete = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this.useImagesLoaded && imagesLoaded === undefined) {\n            imagesLoaded = require('imagesloaded');\n        }\n        if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n            masonryConstructor = require('masonry-layout');\n        }\n        // Create masonry options object\n        if (!this.options) {\n            this.options = {};\n        }\n        // Set default itemSelector\n        if (!this.options.itemSelector) {\n            this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            // Initialize Masonry\n            this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n            // Bind to events\n            this._msnry.on('layoutComplete', (items) => {\n                this.layoutComplete.emit(items);\n            });\n            this._msnry.on('removeComplete', (items) => {\n                this.removeComplete.emit(items);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        // only update layout if it's not the first change\n        if (changes.updateLayout) {\n            if (!changes.updateLayout.firstChange) {\n                this.layout();\n            }\n        }\n    }\n    ngOnDestroy() {\n        if (this._msnry) {\n            this._msnry.destroy();\n        }\n    }\n    layout() {\n        setTimeout(() => {\n            this._msnry.layout();\n        });\n    }\n    reloadItems() {\n        setTimeout(() => {\n            this._msnry.reloadItems();\n        });\n    }\n    // public add(element: HTMLElement, prepend: boolean = false) {\n    add(element) {\n        let isFirstItem = false;\n        // Check if first item\n        if (this._msnry.items.length === 0) {\n            isFirstItem = true;\n        }\n        if (this.useImagesLoaded) {\n            imagesLoaded(element, (instance) => {\n                this._element.nativeElement.appendChild(element);\n                // Tell Masonry that a child element has been added\n                this._msnry.appended(element);\n                // layout if first item\n                if (isFirstItem) {\n                    this.layout();\n                }\n            });\n            this._element.nativeElement.removeChild(element);\n        }\n        else {\n            // Tell Masonry that a child element has been added\n            this._msnry.appended(element);\n            // layout if first item\n            if (isFirstItem) {\n                this.layout();\n            }\n        }\n    }\n    remove(element) {\n        // Tell Masonry that a child element has been removed\n        this._msnry.remove(element);\n        // Layout items\n        this.layout();\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], NgxMasonryComponent.prototype, \"options\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], NgxMasonryComponent.prototype, \"useImagesLoaded\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], NgxMasonryComponent.prototype, \"updateLayout\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], NgxMasonryComponent.prototype, \"layoutComplete\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], NgxMasonryComponent.prototype, \"removeComplete\", void 0);\nNgxMasonryComponent = __decorate([\n    Component({\n        selector: '[ngx-masonry], ngx-masonry',\n        template: '<ng-content></ng-content>',\n        styles: [`\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`]\n    }),\n    __param(0, Inject(PLATFORM_ID)),\n    __metadata(\"design:paramtypes\", [Object, ElementRef])\n], NgxMasonryComponent);\n\nlet NgxMasonryDirective = class NgxMasonryDirective {\n    constructor(_element, _parent, platformId) {\n        this._element = _element;\n        this._parent = _parent;\n        this.platformId = platformId;\n    }\n    ngAfterViewInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this._parent.add(this._element.nativeElement);\n            this.watchForHtmlChanges();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            this._parent.remove(this._element.nativeElement);\n        }\n    }\n    /** When HTML in brick changes dinamically, observe that and change layout */\n    watchForHtmlChanges() {\n        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n        if (MutationObserver) {\n            /** Watch for any changes to subtree */\n            const self = this;\n            const observer = new MutationObserver(function (mutations, observerFromElement) {\n                self._parent.layout();\n            });\n            // define what element should be observed by the observer\n            // and what types of mutations trigger the callback\n            observer.observe(this._element.nativeElement, {\n                subtree: true,\n                childList: true\n            });\n        }\n    }\n};\nNgxMasonryDirective = __decorate([\n    Directive({\n        selector: '[ngxMasonryItem], ngxMasonryItem'\n    }),\n    __param(1, Inject(forwardRef(() => NgxMasonryComponent))),\n    __param(2, Inject(PLATFORM_ID)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        NgxMasonryComponent, Object])\n], NgxMasonryDirective);\n\nlet NgxMasonryModule = class NgxMasonryModule {\n};\nNgxMasonryModule = __decorate([\n    NgModule({\n        imports: [],\n        declarations: [NgxMasonryComponent, NgxMasonryDirective],\n        exports: [NgxMasonryComponent, NgxMasonryDirective]\n    })\n], NgxMasonryModule);\n\nexport { NgxMasonryComponent, NgxMasonryDirective, NgxMasonryModule };\n"]}