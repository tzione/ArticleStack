import * as tslib_1 from "tslib";
import { Directive, Inject, ElementRef, forwardRef, PLATFORM_ID } from '@angular/core';
import { NgxMasonryComponent } from './ngx-masonry.component';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
let NgxMasonryDirective = class NgxMasonryDirective {
    constructor(_element, _parent, platformId) {
        this._element = _element;
        this._parent = _parent;
        this.platformId = platformId;
    }
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this._parent.add(this._element.nativeElement);
            this.watchForHtmlChanges();
        }
    }
    ngOnDestroy() {
        if (isPlatformBrowser(this.platformId)) {
            this._parent.remove(this._element.nativeElement);
        }
    }
    /** When HTML in brick changes dinamically, observe that and change layout */
    watchForHtmlChanges() {
        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
        if (MutationObserver) {
            /** Watch for any changes to subtree */
            const self = this;
            const observer = new MutationObserver(function (mutations, observerFromElement) {
                self._parent.layout();
            });
            // define what element should be observed by the observer
            // and what types of mutations trigger the callback
            observer.observe(this._element.nativeElement, {
                subtree: true,
                childList: true
            });
        }
    }
}
NgxMasonryDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgxMasonryDirective, selectors: [["", "ngxMasonryItem", ""], ["ngxMasonryItem"]], factory: function NgxMasonryDirective_Factory(t) { return new (t || NgxMasonryDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => NgxMasonryComponent)), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxMasonryDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxMasonryItem], ngxMasonryItem'
            }]
    }], function () { return [{ type: ElementRef }, { type: NgxMasonryComponent, decorators: [{
                type: Inject,
                args: [forwardRef(() => NgxMasonryComponent)]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { constructor: [], _element: [], _parent: [], platformId: [], ngAfterViewInit: [], ngOnDestroy: [], watchForHtmlChanges: [] });;
NgxMasonryDirective = tslib_1.__decorate([
    tslib_1.__param(1, Inject(forwardRef(() => NgxMasonryComponent))),
    tslib_1.__param(2, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        NgxMasonryComponent, Object])
], NgxMasonryDirective);
export { NgxMasonryDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvbmd4LW1hc29ucnkvZXNtMjAxNS9saWIvbmd4LW1hc29ucnkuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxSkFrQ0M7MENBQ3lDLEFBR25DIiwiZmlsZSI6Im5neC1tYXNvbnJ5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdCwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neE1hc29ucnlDb21wb25lbnQgfSBmcm9tICcuL25neC1tYXNvbnJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5sZXQgTmd4TWFzb25yeURpcmVjdGl2ZSA9IGNsYXNzIE5neE1hc29ucnlEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50LCBfcGFyZW50LCBwbGF0Zm9ybUlkKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBfZWxlbWVudDtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybUlkID0gcGxhdGZvcm1JZDtcbiAgICB9XG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50LmFkZCh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy53YXRjaEZvckh0bWxDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQucmVtb3ZlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIFdoZW4gSFRNTCBpbiBicmljayBjaGFuZ2VzIGRpbmFtaWNhbGx5LCBvYnNlcnZlIHRoYXQgYW5kIGNoYW5nZSBsYXlvdXQgKi9cbiAgICB3YXRjaEZvckh0bWxDaGFuZ2VzKCkge1xuICAgICAgICBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAgICAgICAvKiogV2F0Y2ggZm9yIGFueSBjaGFuZ2VzIHRvIHN1YnRyZWUgKi9cbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zLCBvYnNlcnZlckZyb21FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fcGFyZW50LmxheW91dCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBkZWZpbmUgd2hhdCBlbGVtZW50IHNob3VsZCBiZSBvYnNlcnZlZCBieSB0aGUgb2JzZXJ2ZXJcbiAgICAgICAgICAgIC8vIGFuZCB3aGF0IHR5cGVzIG9mIG11dGF0aW9ucyB0cmlnZ2VyIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuTmd4TWFzb25yeURpcmVjdGl2ZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgRGlyZWN0aXZlKHtcbiAgICAgICAgc2VsZWN0b3I6ICdbbmd4TWFzb25yeUl0ZW1dLCBuZ3hNYXNvbnJ5SXRlbSdcbiAgICB9KSxcbiAgICB0c2xpYl8xLl9fcGFyYW0oMSwgSW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmd4TWFzb25yeUNvbXBvbmVudCkpKSxcbiAgICB0c2xpYl8xLl9fcGFyYW0oMiwgSW5qZWN0KFBMQVRGT1JNX0lEKSksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0VsZW1lbnRSZWYsXG4gICAgICAgIE5neE1hc29ucnlDb21wb25lbnQsIE9iamVjdF0pXG5dLCBOZ3hNYXNvbnJ5RGlyZWN0aXZlKTtcbmV4cG9ydCB7IE5neE1hc29ucnlEaXJlY3RpdmUgfTtcbiJdfQ==