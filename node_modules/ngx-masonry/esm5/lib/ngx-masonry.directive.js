import * as tslib_1 from "tslib";
import { Directive, Inject, ElementRef, forwardRef, PLATFORM_ID } from '@angular/core';
import { NgxMasonryComponent } from './ngx-masonry.component';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var NgxMasonryDirective = /** @class */ (function () {
    function NgxMasonryDirective(_element, _parent, platformId) {
        this._element = _element;
        this._parent = _parent;
        this.platformId = platformId;
    }
    NgxMasonryDirective.prototype.ngAfterViewInit = function () {
        if (isPlatformBrowser(this.platformId)) {
            this._parent.add(this._element.nativeElement);
            this.watchForHtmlChanges();
        }
    };
    NgxMasonryDirective.prototype.ngOnDestroy = function () {
        if (isPlatformBrowser(this.platformId)) {
            this._parent.remove(this._element.nativeElement);
        }
    };
    /** When HTML in brick changes dinamically, observe that and change layout */
    NgxMasonryDirective.prototype.watchForHtmlChanges = function () {
        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
        if (MutationObserver) {
            /** Watch for any changes to subtree */
            var self_1 = this;
            var observer = new MutationObserver(function (mutations, observerFromElement) {
                self_1._parent.layout();
            });
            // define what element should be observed by the observer
            // and what types of mutations trigger the callback
            observer.observe(this._element.nativeElement, {
                subtree: true,
                childList: true
            });
        }
    };
    NgxMasonryDirective = tslib_1.__decorate([
        tslib_1.__param(1, Inject(forwardRef(function () { return NgxMasonryComponent; }))),
        tslib_1.__param(2, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            NgxMasonryComponent, Object])
    ], NgxMasonryDirective);
NgxMasonryDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgxMasonryDirective, selectors: [["", "ngxMasonryItem", ""], ["ngxMasonryItem"]], factory: function NgxMasonryDirective_Factory(t) { return new (t || NgxMasonryDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () { return NgxMasonryComponent; })), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgxMasonryDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxMasonryItem], ngxMasonryItem'
            }]
    }], function () { return [{ type: ElementRef }, { type: NgxMasonryComponent, decorators: [{
                type: Inject,
                args: [forwardRef(function () { return NgxMasonryComponent; })]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { _element: [], _parent: [], platformId: [], ngAfterViewInit: [], ngOnDestroy: [], watchForHtmlChanges: [] });
    return NgxMasonryDirective;
}());
export { NgxMasonryDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvbmd4LW1hc29ucnkvZXNtNS9saWIvbmd4LW1hc29ucnkuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhDQWtDOEMsQUFHbkM7Ozs7Ozs7Ozs7Ozs7Ozs7OztvSUFLaUIiLCJmaWxlIjoibmd4LW1hc29ucnkuZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4TWFzb25yeUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LW1hc29ucnkuY29tcG9uZW50JztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbnZhciBOZ3hNYXNvbnJ5RGlyZWN0aXZlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5neE1hc29ucnlEaXJlY3RpdmUoX2VsZW1lbnQsIF9wYXJlbnQsIHBsYXRmb3JtSWQpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IF9lbGVtZW50O1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcGFyZW50O1xuICAgICAgICB0aGlzLnBsYXRmb3JtSWQgPSBwbGF0Zm9ybUlkO1xuICAgIH1cbiAgICBOZ3hNYXNvbnJ5RGlyZWN0aXZlLnByb3RvdHlwZS5uZ0FmdGVyVmlld0luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQuYWRkKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLndhdGNoRm9ySHRtbENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTmd4TWFzb25yeURpcmVjdGl2ZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQucmVtb3ZlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBXaGVuIEhUTUwgaW4gYnJpY2sgY2hhbmdlcyBkaW5hbWljYWxseSwgb2JzZXJ2ZSB0aGF0IGFuZCBjaGFuZ2UgbGF5b3V0ICovXG4gICAgTmd4TWFzb25yeURpcmVjdGl2ZS5wcm90b3R5cGUud2F0Y2hGb3JIdG1sQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTXV0YXRpb25PYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICAgICAgICBpZiAoTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgLyoqIFdhdGNoIGZvciBhbnkgY2hhbmdlcyB0byBzdWJ0cmVlICovXG4gICAgICAgICAgICB2YXIgc2VsZl8xID0gdGhpcztcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMsIG9ic2VydmVyRnJvbUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzZWxmXzEuX3BhcmVudC5sYXlvdXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gZGVmaW5lIHdoYXQgZWxlbWVudCBzaG91bGQgYmUgb2JzZXJ2ZWQgYnkgdGhlIG9ic2VydmVyXG4gICAgICAgICAgICAvLyBhbmQgd2hhdCB0eXBlcyBvZiBtdXRhdGlvbnMgdHJpZ2dlciB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOZ3hNYXNvbnJ5RGlyZWN0aXZlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgRGlyZWN0aXZlKHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnW25neE1hc29ucnlJdGVtXSwgbmd4TWFzb25yeUl0ZW0nXG4gICAgICAgIH0pLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMSwgSW5qZWN0KGZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gTmd4TWFzb25yeUNvbXBvbmVudDsgfSkpKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDIsIEluamVjdChQTEFURk9STV9JRCkpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbRWxlbWVudFJlZixcbiAgICAgICAgICAgIE5neE1hc29ucnlDb21wb25lbnQsIE9iamVjdF0pXG4gICAgXSwgTmd4TWFzb25yeURpcmVjdGl2ZSk7XG4gICAgcmV0dXJuIE5neE1hc29ucnlEaXJlY3RpdmU7XG59KCkpO1xuZXhwb3J0IHsgTmd4TWFzb25yeURpcmVjdGl2ZSB9O1xuIl19