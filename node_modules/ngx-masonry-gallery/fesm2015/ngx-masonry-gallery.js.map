{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/ngx-masonry-gallery/fesm2015/ngx-masonry-gallery.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0VC,2YAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,aAaC","file":"ngx-masonry-gallery.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport imagesLoadedMethod from 'imagesloaded';\nimport * as masonry from 'masonry-layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Utilities {\n    /**\n     * @return {?}\n     */\n    newGuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**\n         * @param {?} c\n         * @return {?}\n         */\n        function (c) {\n            // tslint:disable-next-line:no-bitwise triple-equals\n            /** @type {?} */\n            const r = Math.random() * 16 | 0;\n            /** @type {?} */\n            const v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        }));\n    }\n}\n/** @type {?} */\nlet utilities = new Utilities();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MasonryGalleryComponent {\n    /**\n     * @param {?} renderer\n     */\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.images = [];\n        this.width = 330;\n        this.gutter = 5;\n        this.verticalGutter = 5;\n        this.imageClasses = [];\n        this.clickImage = new EventEmitter();\n        this.removeComplete = new EventEmitter();\n        this.layoutComplete = new EventEmitter();\n        this.galleryGuid = utilities.newGuid();\n        this.mansonryItemSelectorClass = `grid-item-${this.galleryGuid}`;\n        this.activeImages = [];\n        this.viewReady = false;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes.images && changes.images.currentValue) {\n            if (!this.viewReady) {\n                // process images once we can\n                this.changesToProcess = changes;\n            }\n            else {\n                this.processImages(changes);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.msnry) {\n            this.msnry.destroy();\n        }\n    }\n    /**\n     * @param {?} image\n     * @return {?}\n     */\n    handleClick(image) {\n        this.clickImage.next(image);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.viewReady = true;\n        this.initMasonry();\n        // process images now\n        if (this.changesToProcess) {\n            this.processImages(this.changesToProcess);\n            this.changesToProcess = undefined;\n        }\n    }\n    /**\n     * @param {?} images\n     * @return {?}\n     */\n    addImages(images) {\n        if (images && images.length > 0) {\n            this.addImagesToGallery(images);\n        }\n    }\n    /**\n     * @param {?} images\n     * @return {?}\n     */\n    removeImages(images) {\n        if (images && images.length > 0) {\n            images.forEach((/**\n             * @param {?} image\n             * @return {?}\n             */\n            image => {\n                this.removeImageFromGallery(image);\n            }));\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    processImages(changes) {\n        /** @type {?} */\n        const imagesToProcess = this.getAddedAndRemovesImages(changes);\n        // add images to mansonry layout\n        this.addImages(imagesToProcess.addedImages);\n        // removes images from layout\n        this.removeImages(imagesToProcess.removedImages);\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    getAddedAndRemovesImages(changes) {\n        /** @type {?} */\n        let addedImages = [];\n        /** @type {?} */\n        const removedImages = [];\n        /** @type {?} */\n        const newImagesValue = (/** @type {?} */ (changes.images\n            .currentValue));\n        /** @type {?} */\n        const oldImagesValue = (/** @type {?} */ (changes.images\n            .previousValue));\n        if (!oldImagesValue) {\n            // all images are new ones\n            addedImages = changes.images.currentValue;\n        }\n        else {\n            // process added images\n            newImagesValue.forEach((/**\n             * @param {?} newImage\n             * @return {?}\n             */\n            newImage => {\n                /** @type {?} */\n                const existingImage = oldImagesValue.find((/**\n                 * @param {?} m\n                 * @return {?}\n                 */\n                m => m.imageUrl.toLowerCase() === newImage.imageUrl.toLowerCase()));\n                if (existingImage) ;\n                else {\n                    // image is new\n                    addedImages.push(newImage);\n                }\n            }));\n            // process removed images\n            oldImagesValue.forEach((/**\n             * @param {?} oldImage\n             * @return {?}\n             */\n            oldImage => {\n                /** @type {?} */\n                const existingImage = newImagesValue.find((/**\n                 * @param {?} m\n                 * @return {?}\n                 */\n                m => m.imageUrl.toLowerCase() === oldImage.imageUrl.toLowerCase()));\n                if (existingImage) ;\n                else {\n                    // image is removed\n                    removedImages.push(oldImage);\n                }\n            }));\n        }\n        return {\n            addedImages: addedImages,\n            removedImages: removedImages\n        };\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    initMasonry() {\n        this.grid = document.getElementById(this.galleryGuid);\n        // remove all existing data from grid\n        this.grid.innerHTML = '';\n        if (!this.grid) {\n            throw Error(`Could not init mansory due to non existing elem with id '${this.galleryGuid}'`);\n        }\n        this.msnry = new masonry(this.grid, {\n            // options...\n            itemSelector: '.' + this.mansonryItemSelectorClass,\n            columnWidth: this.width,\n            gutter: this.gutter,\n        });\n        /** @type {?} */\n        const that = this;\n        this.msnry.on('layoutComplete', (/**\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) {\n            that.layoutComplete.next(items);\n        }));\n        this.msnry.on('removeComplete', (/**\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) {\n            that.removeComplete.next(items);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} image\n     * @return {?}\n     */\n    removeImageFromGallery(image) {\n        // get image guid\n        /** @type {?} */\n        const imageIdResult = this.activeImages.find((/**\n         * @param {?} m\n         * @return {?}\n         */\n        m => m.image.imageUrl.toLowerCase() === image.imageUrl.toLowerCase()));\n        if (!imageIdResult) {\n            // image was not found, this is probably an error\n            console.warn(`Image with url '${image.imageUrl}' was not found. If you are adding images, make sure to 'replace' the images array with a new one\n                so that detection change can be executed instead of just adding an image to array\n                (which doesn't fire change detection on array property)`);\n            return;\n        }\n        // find image based on its id\n        /** @type {?} */\n        const imageElem = document.getElementById(imageIdResult.id);\n        if (!imageElem) {\n            // image was not found in DOM\n            console.warn(`Image with id '{${imageIdResult.id}}' was not found in DOM. Have you manipulated the DOM in some way?`);\n            return;\n        }\n        // remove image from gallery\n        this.msnry.remove(imageElem);\n        // refresh layout\n        this.msnry.layout();\n        // remove image from array\n        for (let i = 0; i < this.activeImages.length; i++) {\n            /** @type {?} */\n            const idWithImage = this.activeImages[i];\n            if (idWithImage.image.imageUrl.toLowerCase() ===\n                imageIdResult.image.imageUrl.toLowerCase()) {\n                this.activeImages.splice(i, 1);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} images\n     * @return {?}\n     */\n    addImagesToGallery(images) {\n        if (!this.grid) {\n            throw Error('Grid element is not yet ready, are you trying to add image too soon?');\n        }\n        /** @type {?} */\n        const imagesWrapper = this.renderer.createElement('span');\n        images.forEach((/**\n         * @param {?} image\n         * @return {?}\n         */\n        image => {\n            // generate unique image id\n            /** @type {?} */\n            const imageId = this.getImageId();\n            // create element\n            /** @type {?} */\n            const imageElem = this.renderer.createElement('img');\n            imageElem.setAttribute('id', imageId);\n            imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');\n            imageElem.setAttribute('src', image.imageUrl);\n            // note - images are hidden by default and should be shown only after they are loaded\n            imageElem.setAttribute('style', `display: none; width: ${this.width}px; margin-bottom: ${this.verticalGutter}px`);\n            imageElem.className = this.getImageClass();\n            imageElem.addEventListener('click', (/**\n             * @return {?}\n             */\n            () => {\n                this.handleClick(image);\n            }));\n            // store guid with this image\n            this.activeImages.push({\n                id: imageId,\n                image: image\n            });\n            // add to dom and mansory & refresh layout\n            this.renderer.appendChild(imagesWrapper, imageElem);\n        }));\n        // add html to dom\n        this.renderer.appendChild(this.grid, imagesWrapper);\n        // add images once they are loaded\n        /** @type {?} */\n        const imgLoad = imagesLoadedMethod(imagesWrapper);\n        imgLoad.on('progress', (/**\n         * @param {?} instance\n         * @param {?} image\n         * @return {?}\n         */\n        (instance, image) => {\n            if (image.isLoaded) {\n                this.renderer.appendChild(this.grid, image.img);\n                // unhide image\n                this.renderer.setStyle(image.img, 'display', 'block');\n                this.msnry.appended(image.img);\n                this.msnry.reloadItems();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getImageClass() {\n        /** @type {?} */\n        let className = this.mansonryItemSelectorClass;\n        if (this.imageClasses && this.imageClasses.length > 0) {\n            /** @type {?} */\n            const customClass = this.imageClasses.join(' ');\n            className += ' ' + customClass;\n        }\n        return className;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getImageId() {\n        return this.galleryGuid + '_' + utilities.newGuid();\n    }\n}\nMasonryGalleryComponent.decorators = [\n    { type: Component, args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'ngx-masonry-gallery',\n                template: '<div [id]=\"galleryGuid\"></div>'\n            }] }\n];\n/** @nocollapse */\nMasonryGalleryComponent.ctorParameters = () => [\n    { type: Renderer2 }\n];\nMasonryGalleryComponent.propDecorators = {\n    images: [{ type: Input }],\n    width: [{ type: Input }],\n    gutter: [{ type: Input }],\n    verticalGutter: [{ type: Input }],\n    imageClasses: [{ type: Input }],\n    clickImage: [{ type: Output }],\n    removeComplete: [{ type: Output }],\n    layoutComplete: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MasonryGalleryModule {\n}\nMasonryGalleryModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    MasonryGalleryComponent,\n                ],\n                exports: [\n                    MasonryGalleryComponent,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass IMasonryGalleryImage {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { IMasonryGalleryImage, MasonryGalleryComponent, MasonryGalleryModule };\n"]}