{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@ngrx/effects/bundles/effects.umd.js"],"names":[],"mappings":"AAAA;;;;;;2NAMkM;sKAC5C;;uEAEtF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAwKd,AACpB;;;;;;;;;;oCAGV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAkFwB,AACd;;;;;;yHAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAgDkB,AACd;;;;;;;yKAGJ;;;;;;;;;;;;;;;;;;gDAkBsB,AAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;;sZAUA;;;;;;;;;;;;mDAYqB,AACrB;;;;;;;;;;;;;;;;;;;+TAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyCvB;;;;;;6IAGgB","file":"effects.umd.js","sourcesContent":["/**\n * @license NgRx 8.5.2\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@ngrx/store'), require('rxjs'), require('rxjs/operators'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/effects', ['exports', 'tslib', '@ngrx/store', 'rxjs', 'rxjs/operators', '@angular/core'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.effects = {}), global.tslib, global['@ngrx/store'], global.rxjs, global.rxjs.operators, global.ng.core));\n}(this, function (exports, tslib_1, store, rxjs, operators, core) { 'use strict';\n\n    var DEFAULT_EFFECT_CONFIG = {\n        dispatch: true,\n        resubscribeOnError: true,\n    };\n    var CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\n    /**\n     * @description\n     * Creates an effect from an `Observable` and an `EffectConfig`.\n     *\n     * @param source A function which returns an `Observable`.\n     * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `resubscribeOnError` is true.\n     * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n     *\n     * @usageNotes\n     *\n     * ** Mapping to a different action **\n     * ```ts\n     * effectName$ = createEffect(\n     *   () => this.actions$.pipe(\n     *     ofType(FeatureActions.actionOne),\n     *     map(() => FeatureActions.actionTwo())\n     *   )\n     * );\n     * ```\n     *\n     *  ** Non-dispatching effects **\n     * ```ts\n     * effectName$ = createEffect(\n     *   () => this.actions$.pipe(\n     *     ofType(FeatureActions.actionOne),\n     *     tap(() => console.log('Action One Dispatched'))\n     *   ),\n     *   { dispatch: false }\n     *   // FeatureActions.actionOne is not dispatched\n     * );\n     * ```\n     */\n    function createEffect(source, config) {\n        var effect = source();\n        var value = tslib_1.__assign({}, DEFAULT_EFFECT_CONFIG, config);\n        Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n            value: value,\n        });\n        return effect;\n    }\n    function getCreateEffectMetadata(instance) {\n        var propertyNames = Object.getOwnPropertyNames(instance);\n        var metadata = propertyNames\n            .filter(function (propertyName) {\n            return instance[propertyName] &&\n                instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY);\n        })\n            .map(function (propertyName) {\n            var metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n            return tslib_1.__assign({ propertyName: propertyName }, metaData);\n        });\n        return metadata;\n    }\n\n    function getSourceForInstance(instance) {\n        return Object.getPrototypeOf(instance);\n    }\n\n    var METADATA_KEY = '__@ngrx/effects__';\n    function Effect(config) {\n        if (config === void 0) { config = {}; }\n        return function (target, propertyName) {\n            var metadata = tslib_1.__assign({}, DEFAULT_EFFECT_CONFIG, config, { // Overrides any defaults if values are provided\n                propertyName: propertyName });\n            addEffectMetadataEntry(target, metadata);\n        };\n    }\n    function getEffectDecoratorMetadata(instance) {\n        var effectsDecorators = store.compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n        return effectsDecorators;\n    }\n    /**\n     * Type guard to detemine whether METADATA_KEY is already present on the Class\n     * constructor\n     */\n    function hasMetadataEntries(sourceProto) {\n        return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n    }\n    /** Add Effect Metadata to the Effect Class constructor under specific key */\n    function addEffectMetadataEntry(sourceProto, metadata) {\n        if (hasMetadataEntries(sourceProto)) {\n            sourceProto.constructor[METADATA_KEY].push(metadata);\n        }\n        else {\n            Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n                value: [metadata],\n            });\n        }\n    }\n    function getEffectMetadataEntries(sourceProto) {\n        return hasMetadataEntries(sourceProto)\n            ? sourceProto.constructor[METADATA_KEY]\n            : [];\n    }\n\n    function getEffectsMetadata(instance) {\n        return getSourceMetadata(instance).reduce(function (acc, _a) {\n            var propertyName = _a.propertyName, dispatch = _a.dispatch, resubscribeOnError = _a.resubscribeOnError;\n            acc[propertyName] = { dispatch: dispatch, resubscribeOnError: resubscribeOnError };\n            return acc;\n        }, {});\n    }\n    function getSourceMetadata(instance) {\n        var effects = [\n            getEffectDecoratorMetadata,\n            getCreateEffectMetadata,\n        ];\n        return effects.reduce(function (sources, source) { return sources.concat(source(instance)); }, []);\n    }\n\n    function mergeEffects(sourceInstance, errorHandler) {\n        var sourceName = getSourceForInstance(sourceInstance).constructor.name;\n        var observables$ = getSourceMetadata(sourceInstance).map(function (_a) {\n            var propertyName = _a.propertyName, dispatch = _a.dispatch, resubscribeOnError = _a.resubscribeOnError;\n            var observable$ = typeof sourceInstance[propertyName] === 'function'\n                ? sourceInstance[propertyName]()\n                : sourceInstance[propertyName];\n            var resubscribable$ = resubscribeOnError\n                ? resubscribeInCaseOfError(observable$, errorHandler)\n                : observable$;\n            if (dispatch === false) {\n                return resubscribable$.pipe(operators.ignoreElements());\n            }\n            var materialized$ = resubscribable$.pipe(operators.materialize());\n            return materialized$.pipe(operators.map(function (notification) { return ({\n                effect: sourceInstance[propertyName],\n                notification: notification,\n                propertyName: propertyName,\n                sourceName: sourceName,\n                sourceInstance: sourceInstance,\n            }); }));\n        });\n        return rxjs.merge.apply(void 0, tslib_1.__spread(observables$));\n    }\n    function resubscribeInCaseOfError(observable$, errorHandler) {\n        return observable$.pipe(operators.catchError(function (error) {\n            if (errorHandler)\n                errorHandler.handleError(error);\n            // Return observable that produces this particular effect\n            return resubscribeInCaseOfError(observable$, errorHandler);\n        }));\n    }\n\n    var Actions = /** @class */ (function (_super) {\n        tslib_1.__extends(Actions, _super);\n        function Actions(source) {\n            var _this = _super.call(this) || this;\n            if (source) {\n                _this.source = source;\n            }\n            return _this;\n        }\n        Actions_1 = Actions;\n        Actions.prototype.lift = function (operator) {\n            var observable = new Actions_1();\n            observable.source = this;\n            observable.operator = operator;\n            return observable;\n        };\n        var Actions_1;\n        Actions = Actions_1 = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__param(0, core.Inject(store.ScannedActionsSubject)),\n            tslib_1.__metadata(\"design:paramtypes\", [rxjs.Observable])\n        ], Actions);\n        return Actions;\n    }(rxjs.Observable));\n    function ofType() {\n        var allowedTypes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            allowedTypes[_i] = arguments[_i];\n        }\n        return operators.filter(function (action) {\n            return allowedTypes.some(function (typeOrActionCreator) {\n                if (typeof typeOrActionCreator === 'string') {\n                    // Comparing the string to type\n                    return typeOrActionCreator === action.type;\n                }\n                // We are filtering by ActionCreator\n                return typeOrActionCreator.type === action.type;\n            });\n        });\n    }\n\n    function reportInvalidActions(output, reporter) {\n        if (output.notification.kind === 'N') {\n            var action = output.notification.value;\n            var isInvalidAction = !isAction(action);\n            if (isInvalidAction) {\n                reporter.handleError(new Error(\"Effect \" + getEffectName(output) + \" dispatched an invalid action: \" + stringify(action)));\n            }\n        }\n    }\n    function isAction(action) {\n        return (typeof action !== 'function' &&\n            action &&\n            action.type &&\n            typeof action.type === 'string');\n    }\n    function getEffectName(_a) {\n        var propertyName = _a.propertyName, sourceInstance = _a.sourceInstance, sourceName = _a.sourceName;\n        var isMethod = typeof sourceInstance[propertyName] === 'function';\n        return \"\\\"\" + sourceName + \".\" + String(propertyName) + (isMethod ? '()' : '') + \"\\\"\";\n    }\n    function stringify(action) {\n        try {\n            return JSON.stringify(action);\n        }\n        catch (_a) {\n            return action;\n        }\n    }\n\n    var onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\n    var onRunEffectsKey = 'ngrxOnRunEffects';\n    var onInitEffects = 'ngrxOnInitEffects';\n\n    var EffectSources = /** @class */ (function (_super) {\n        tslib_1.__extends(EffectSources, _super);\n        function EffectSources(errorHandler, store) {\n            var _this = _super.call(this) || this;\n            _this.errorHandler = errorHandler;\n            _this.store = store;\n            return _this;\n        }\n        EffectSources.prototype.addEffects = function (effectSourceInstance) {\n            this.next(effectSourceInstance);\n            if (onInitEffects in effectSourceInstance &&\n                typeof effectSourceInstance[onInitEffects] === 'function') {\n                this.store.dispatch(effectSourceInstance[onInitEffects]());\n            }\n        };\n        /**\n         * @internal\n         */\n        EffectSources.prototype.toActions = function () {\n            var _this = this;\n            return this.pipe(operators.groupBy(getSourceForInstance), operators.mergeMap(function (source$) { return source$.pipe(operators.groupBy(effectsInstance)); }), operators.mergeMap(function (source$) {\n                return source$.pipe(operators.exhaustMap(resolveEffectSource(_this.errorHandler)), operators.map(function (output) {\n                    reportInvalidActions(output, _this.errorHandler);\n                    return output.notification;\n                }), operators.filter(function (notification) {\n                    return notification.kind === 'N';\n                }), operators.dematerialize());\n            }));\n        };\n        EffectSources = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__metadata(\"design:paramtypes\", [core.ErrorHandler, store.Store])\n        ], EffectSources);\n        return EffectSources;\n    }(rxjs.Subject));\n    function effectsInstance(sourceInstance) {\n        if (onIdentifyEffectsKey in sourceInstance &&\n            typeof sourceInstance[onIdentifyEffectsKey] === 'function') {\n            return sourceInstance[onIdentifyEffectsKey]();\n        }\n        return '';\n    }\n    function resolveEffectSource(errorHandler) {\n        return function (sourceInstance) {\n            var mergedEffects$ = mergeEffects(sourceInstance, errorHandler);\n            if (isOnRunEffects(sourceInstance)) {\n                return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n            }\n            return mergedEffects$;\n        };\n    }\n    function isOnRunEffects(sourceInstance) {\n        var source = getSourceForInstance(sourceInstance);\n        return (onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function');\n    }\n\n    var _ROOT_EFFECTS_GUARD = new core.InjectionToken('@ngrx/effects Internal Root Guard');\n    var IMMEDIATE_EFFECTS = new core.InjectionToken('ngrx/effects: Immediate Effects');\n    var ROOT_EFFECTS = new core.InjectionToken('ngrx/effects: Root Effects');\n    var FEATURE_EFFECTS = new core.InjectionToken('ngrx/effects: Feature Effects');\n\n    var EffectsRunner = /** @class */ (function () {\n        function EffectsRunner(effectSources, store) {\n            this.effectSources = effectSources;\n            this.store = store;\n            this.effectsSubscription = null;\n        }\n        EffectsRunner.prototype.start = function () {\n            if (!this.effectsSubscription) {\n                this.effectsSubscription = this.effectSources\n                    .toActions()\n                    .subscribe(this.store);\n            }\n        };\n        EffectsRunner.prototype.ngOnDestroy = function () {\n            if (this.effectsSubscription) {\n                this.effectsSubscription.unsubscribe();\n                this.effectsSubscription = null;\n            }\n        };\n        EffectsRunner = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__metadata(\"design:paramtypes\", [EffectSources,\n                store.Store])\n        ], EffectsRunner);\n        return EffectsRunner;\n    }());\n\n    var ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n    var rootEffectsInit = store.createAction(ROOT_EFFECTS_INIT);\n    var EffectsRootModule = /** @class */ (function () {\n        function EffectsRootModule(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {\n            this.sources = sources;\n            runner.start();\n            rootEffects.forEach(function (effectSourceInstance) {\n                return sources.addEffects(effectSourceInstance);\n            });\n            store.dispatch({ type: ROOT_EFFECTS_INIT });\n        }\n        EffectsRootModule.prototype.addEffects = function (effectSourceInstance) {\n            this.sources.addEffects(effectSourceInstance);\n        };\n        EffectsRootModule = tslib_1.__decorate([\n            core.NgModule({}),\n            tslib_1.__param(3, core.Inject(ROOT_EFFECTS)),\n            tslib_1.__param(4, core.Optional()),\n            tslib_1.__param(5, core.Optional()),\n            tslib_1.__param(6, core.Optional()),\n            tslib_1.__param(6, core.Inject(_ROOT_EFFECTS_GUARD)),\n            tslib_1.__metadata(\"design:paramtypes\", [EffectSources,\n                EffectsRunner,\n                store.Store, Array, store.StoreRootModule,\n                store.StoreFeatureModule, Object])\n        ], EffectsRootModule);\n        return EffectsRootModule;\n    }());\n\n    var EffectsFeatureModule = /** @class */ (function () {\n        function EffectsFeatureModule(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n            effectSourceGroups.forEach(function (group) {\n                return group.forEach(function (effectSourceInstance) {\n                    return root.addEffects(effectSourceInstance);\n                });\n            });\n        }\n        EffectsFeatureModule = tslib_1.__decorate([\n            core.NgModule({}),\n            tslib_1.__param(1, core.Inject(FEATURE_EFFECTS)),\n            tslib_1.__param(2, core.Optional()),\n            tslib_1.__param(3, core.Optional()),\n            tslib_1.__metadata(\"design:paramtypes\", [EffectsRootModule, Array, store.StoreRootModule,\n                store.StoreFeatureModule])\n        ], EffectsFeatureModule);\n        return EffectsFeatureModule;\n    }());\n\n    var EffectsModule = /** @class */ (function () {\n        function EffectsModule() {\n        }\n        EffectsModule.forFeature = function (featureEffects) {\n            return {\n                ngModule: EffectsFeatureModule,\n                providers: [\n                    featureEffects,\n                    {\n                        provide: FEATURE_EFFECTS,\n                        multi: true,\n                        deps: featureEffects,\n                        useFactory: createSourceInstances,\n                    },\n                ],\n            };\n        };\n        EffectsModule.forRoot = function (rootEffects) {\n            return {\n                ngModule: EffectsRootModule,\n                providers: [\n                    {\n                        provide: _ROOT_EFFECTS_GUARD,\n                        useFactory: _provideForRootGuard,\n                        deps: [[EffectsRunner, new core.Optional(), new core.SkipSelf()]],\n                    },\n                    EffectsRunner,\n                    EffectSources,\n                    Actions,\n                    rootEffects,\n                    {\n                        provide: ROOT_EFFECTS,\n                        deps: rootEffects,\n                        useFactory: createSourceInstances,\n                    },\n                ],\n            };\n        };\n        EffectsModule = tslib_1.__decorate([\n            core.NgModule({})\n        ], EffectsModule);\n        return EffectsModule;\n    }());\n    function createSourceInstances() {\n        var instances = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            instances[_i] = arguments[_i];\n        }\n        return instances;\n    }\n    function _provideForRootGuard(runner) {\n        if (runner) {\n            throw new TypeError(\"EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.\");\n        }\n        return 'guarded';\n    }\n\n    function act(\n    /** Allow to take either config object or project/error functions */\n    configOrProject, errorFn) {\n        var _a = typeof configOrProject === 'function'\n            ? {\n                project: configOrProject,\n                error: errorFn,\n                operator: operators.concatMap,\n                complete: undefined,\n                unsubscribe: undefined,\n            }\n            : tslib_1.__assign({}, configOrProject, { operator: configOrProject.operator || operators.concatMap }), project = _a.project, error = _a.error, complete = _a.complete, operator = _a.operator, unsubscribe = _a.unsubscribe;\n        return function (source) {\n            return rxjs.defer(function () {\n                var subject = new rxjs.Subject();\n                return rxjs.merge(source.pipe(operator(function (input, index) {\n                    return rxjs.defer(function () {\n                        var completed = false;\n                        var errored = false;\n                        var projectedCount = 0;\n                        return project(input, index).pipe(operators.materialize(), operators.map(function (notification) {\n                            switch (notification.kind) {\n                                case 'E':\n                                    errored = true;\n                                    return new rxjs.Notification(\n                                    // TODO: remove any in RxJS 6.5\n                                    'N', error(notification.error, input));\n                                case 'C':\n                                    completed = true;\n                                    return complete\n                                        ? new rxjs.Notification(\n                                        // TODO: remove any in RxJS 6.5\n                                        'N', complete(projectedCount, input))\n                                        : undefined;\n                                default:\n                                    ++projectedCount;\n                                    return notification;\n                            }\n                        }), operators.filter(function (n) { return n != null; }), operators.dematerialize(), operators.finalize(function () {\n                            if (!completed && !errored && unsubscribe) {\n                                subject.next(unsubscribe(projectedCount, input));\n                            }\n                        }));\n                    });\n                })), subject);\n            });\n        };\n    }\n\n    /**\n     * DO NOT EDIT\n     *\n     * This file is automatically generated at build\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵngrx_modules_effects_effects_a = getSourceMetadata;\n    exports.ɵngrx_modules_effects_effects_c = _provideForRootGuard;\n    exports.ɵngrx_modules_effects_effects_b = createSourceInstances;\n    exports.ɵngrx_modules_effects_effects_g = EffectsRunner;\n    exports.ɵngrx_modules_effects_effects_f = FEATURE_EFFECTS;\n    exports.ɵngrx_modules_effects_effects_e = ROOT_EFFECTS;\n    exports.ɵngrx_modules_effects_effects_d = _ROOT_EFFECTS_GUARD;\n    exports.createEffect = createEffect;\n    exports.Effect = Effect;\n    exports.getEffectsMetadata = getEffectsMetadata;\n    exports.mergeEffects = mergeEffects;\n    exports.Actions = Actions;\n    exports.ofType = ofType;\n    exports.EffectsModule = EffectsModule;\n    exports.EffectSources = EffectSources;\n    exports.EffectsFeatureModule = EffectsFeatureModule;\n    exports.ROOT_EFFECTS_INIT = ROOT_EFFECTS_INIT;\n    exports.rootEffectsInit = rootEffectsInit;\n    exports.EffectsRootModule = EffectsRootModule;\n    exports.act = act;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}