/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Inject, Optional } from '@angular/core';
import { StoreRootModule, StoreFeatureModule } from '@ngrx/store';
import { EffectsRootModule } from './effects_root_module';
import { FEATURE_EFFECTS } from './tokens';
import * as ɵngcc0 from '@angular/core';
export class EffectsFeatureModule {
    /**
     * @param {?} root
     * @param {?} effectSourceGroups
     * @param {?} storeRootModule
     * @param {?} storeFeatureModule
     */
    constructor(root, effectSourceGroups, storeRootModule, storeFeatureModule) {
        effectSourceGroups.forEach((/**
         * @param {?} group
         * @return {?}
         */
        group => group.forEach((/**
         * @param {?} effectSourceInstance
         * @return {?}
         */
        effectSourceInstance => root.addEffects(effectSourceInstance)))));
    }
}
EffectsFeatureModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: EffectsFeatureModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(EffectsFeatureModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: EffectsRootModule }, { type: Array, decorators: [{
                type: Inject,
                args: [FEATURE_EFFECTS]
            }] }, { type: StoreRootModule, decorators: [{
                type: Optional
            }] }, { type: StoreFeatureModule, decorators: [{
                type: Optional
            }] }]; }, { constructor: [] });
EffectsFeatureModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function EffectsFeatureModule_Factory(t) { return new (t || EffectsFeatureModule)(ɵngcc0.ɵɵinject(EffectsRootModule), ɵngcc0.ɵɵinject(FEATURE_EFFECTS), ɵngcc0.ɵɵinject(StoreRootModule, 8), ɵngcc0.ɵɵinject(StoreFeatureModule, 8)); } });
/** @nocollapse */
EffectsFeatureModule.ctorParameters = () => [
    { type: EffectsRootModule },
    { type: Array, decorators: [{ type: Inject, args: [FEATURE_EFFECTS,] }] },
    { type: StoreRootModule, decorators: [{ type: Optional }] },
    { type: StoreFeatureModule, decorators: [{ type: Optional }] }
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvQG5ncngvZWZmZWN0cy9lc20yMDE1L3NyYy9lZmZlY3RzX2ZlYXR1cmVfbW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxrVEFHQyIsImZpbGUiOiJlZmZlY3RzX2ZlYXR1cmVfbW9kdWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZVJvb3RNb2R1bGUsIFN0b3JlRmVhdHVyZU1vZHVsZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEVmZmVjdHNSb290TW9kdWxlIH0gZnJvbSAnLi9lZmZlY3RzX3Jvb3RfbW9kdWxlJztcbmltcG9ydCB7IEZFQVRVUkVfRUZGRUNUUyB9IGZyb20gJy4vdG9rZW5zJztcbmV4cG9ydCBjbGFzcyBFZmZlY3RzRmVhdHVyZU1vZHVsZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByb290XG4gICAgICogQHBhcmFtIHs/fSBlZmZlY3RTb3VyY2VHcm91cHNcbiAgICAgKiBAcGFyYW0gez99IHN0b3JlUm9vdE1vZHVsZVxuICAgICAqIEBwYXJhbSB7P30gc3RvcmVGZWF0dXJlTW9kdWxlXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdCwgZWZmZWN0U291cmNlR3JvdXBzLCBzdG9yZVJvb3RNb2R1bGUsIHN0b3JlRmVhdHVyZU1vZHVsZSkge1xuICAgICAgICBlZmZlY3RTb3VyY2VHcm91cHMuZm9yRWFjaCgoLyoqXG4gICAgICAgICAqIEBwYXJhbSB7P30gZ3JvdXBcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGdyb3VwID0+IGdyb3VwLmZvckVhY2goKC8qKlxuICAgICAgICAgKiBAcGFyYW0gez99IGVmZmVjdFNvdXJjZUluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBlZmZlY3RTb3VyY2VJbnN0YW5jZSA9PiByb290LmFkZEVmZmVjdHMoZWZmZWN0U291cmNlSW5zdGFuY2UpKSkpKTtcbiAgICB9XG59XG5FZmZlY3RzRmVhdHVyZU1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7fSxdIH1cbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkVmZmVjdHNGZWF0dXJlTW9kdWxlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogRWZmZWN0c1Jvb3RNb2R1bGUgfSxcbiAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtGRUFUVVJFX0VGRkVDVFMsXSB9XSB9LFxuICAgIHsgdHlwZTogU3RvcmVSb290TW9kdWxlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9XSB9LFxuICAgIHsgdHlwZTogU3RvcmVGZWF0dXJlTW9kdWxlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9XSB9XG5dO1xuIl19