import * as tslib_1 from "tslib";
import { ErrorHandler, Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { Subject } from 'rxjs';
import { dematerialize, exhaustMap, filter, groupBy, map, mergeMap, } from 'rxjs/operators';
import { reportInvalidActions, } from './effect_notification';
import { mergeEffects } from './effects_resolver';
import { onIdentifyEffectsKey, onRunEffectsKey, onInitEffects, } from './lifecycle_hooks';
import { getSourceForInstance } from './utils';
import * as ɵngcc0 from '@angular/core';
var EffectSources = /** @class */ (function (_super) {
    tslib_1.__extends(EffectSources, _super);
    function EffectSources(errorHandler, store) {
        var _this = _super.call(this) || this;
        _this.errorHandler = errorHandler;
        _this.store = store;
        return _this;
    }
    EffectSources.prototype.addEffects = function (effectSourceInstance) {
        this.next(effectSourceInstance);
        if (onInitEffects in effectSourceInstance &&
            typeof effectSourceInstance[onInitEffects] === 'function') {
            this.store.dispatch(effectSourceInstance[onInitEffects]());
        }
    };
    /**
     * @internal
     */
    EffectSources.prototype.toActions = function () {
        var _this = this;
        return this.pipe(groupBy(getSourceForInstance), mergeMap(function (source$) { return source$.pipe(groupBy(effectsInstance)); }), mergeMap(function (source$) {
            return source$.pipe(exhaustMap(resolveEffectSource(_this.errorHandler)), map(function (output) {
                reportInvalidActions(output, _this.errorHandler);
                return output.notification;
            }), filter(function (notification) {
                return notification.kind === 'N';
            }), dematerialize());
        }));
    };
    EffectSources = tslib_1.__decorate([
        tslib_1.__metadata("design:paramtypes", [ErrorHandler, Store])
    ], EffectSources);
EffectSources.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: EffectSources, factory: function EffectSources_Factory(t) { return new (t || EffectSources)(ɵngcc0.ɵɵinject(ErrorHandler), ɵngcc0.ɵɵinject(Store)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(EffectSources, [{
        type: Injectable
    }], function () { return [{ type: ErrorHandler }, { type: Store }]; }, { addEffects: [], toActions: [] });
    return EffectSources;
}(Subject));
export { EffectSources };
function effectsInstance(sourceInstance) {
    if (onIdentifyEffectsKey in sourceInstance &&
        typeof sourceInstance[onIdentifyEffectsKey] === 'function') {
        return sourceInstance[onIdentifyEffectsKey]();
    }
    return '';
}
function resolveEffectSource(errorHandler) {
    return function (sourceInstance) {
        var mergedEffects$ = mergeEffects(sourceInstance, errorHandler);
        if (isOnRunEffects(sourceInstance)) {
            return sourceInstance.ngrxOnRunEffects(mergedEffects$);
        }
        return mergedEffects$;
    };
}
function isOnRunEffects(sourceInstance) {
    var source = getSourceForInstance(sourceInstance);
    return (onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function');
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvQG5ncngvZWZmZWN0cy9lc201L3NyYy9lZmZlY3Rfc291cmNlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0E2QndDLEFBQ25COzs7Ozs7OEdBRUMiLCJmaWxlIjoiZWZmZWN0X3NvdXJjZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbWF0ZXJpYWxpemUsIGV4aGF1c3RNYXAsIGZpbHRlciwgZ3JvdXBCeSwgbWFwLCBtZXJnZU1hcCwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyByZXBvcnRJbnZhbGlkQWN0aW9ucywgfSBmcm9tICcuL2VmZmVjdF9ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgbWVyZ2VFZmZlY3RzIH0gZnJvbSAnLi9lZmZlY3RzX3Jlc29sdmVyJztcbmltcG9ydCB7IG9uSWRlbnRpZnlFZmZlY3RzS2V5LCBvblJ1bkVmZmVjdHNLZXksIG9uSW5pdEVmZmVjdHMsIH0gZnJvbSAnLi9saWZlY3ljbGVfaG9va3MnO1xuaW1wb3J0IHsgZ2V0U291cmNlRm9ySW5zdGFuY2UgfSBmcm9tICcuL3V0aWxzJztcbnZhciBFZmZlY3RTb3VyY2VzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEVmZmVjdFNvdXJjZXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRWZmZWN0U291cmNlcyhlcnJvckhhbmRsZXIsIHN0b3JlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlcjtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFZmZlY3RTb3VyY2VzLnByb3RvdHlwZS5hZGRFZmZlY3RzID0gZnVuY3Rpb24gKGVmZmVjdFNvdXJjZUluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMubmV4dChlZmZlY3RTb3VyY2VJbnN0YW5jZSk7XG4gICAgICAgIGlmIChvbkluaXRFZmZlY3RzIGluIGVmZmVjdFNvdXJjZUluc3RhbmNlICYmXG4gICAgICAgICAgICB0eXBlb2YgZWZmZWN0U291cmNlSW5zdGFuY2Vbb25Jbml0RWZmZWN0c10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goZWZmZWN0U291cmNlSW5zdGFuY2Vbb25Jbml0RWZmZWN0c10oKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEVmZmVjdFNvdXJjZXMucHJvdG90eXBlLnRvQWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZShncm91cEJ5KGdldFNvdXJjZUZvckluc3RhbmNlKSwgbWVyZ2VNYXAoZnVuY3Rpb24gKHNvdXJjZSQpIHsgcmV0dXJuIHNvdXJjZSQucGlwZShncm91cEJ5KGVmZmVjdHNJbnN0YW5jZSkpOyB9KSwgbWVyZ2VNYXAoZnVuY3Rpb24gKHNvdXJjZSQpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UkLnBpcGUoZXhoYXVzdE1hcChyZXNvbHZlRWZmZWN0U291cmNlKF90aGlzLmVycm9ySGFuZGxlcikpLCBtYXAoZnVuY3Rpb24gKG91dHB1dCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydEludmFsaWRBY3Rpb25zKG91dHB1dCwgX3RoaXMuZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0Lm5vdGlmaWNhdGlvbjtcbiAgICAgICAgICAgIH0pLCBmaWx0ZXIoZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3RpZmljYXRpb24ua2luZCA9PT0gJ04nO1xuICAgICAgICAgICAgfSksIGRlbWF0ZXJpYWxpemUoKSk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIEVmZmVjdFNvdXJjZXMgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtFcnJvckhhbmRsZXIsIFN0b3JlXSlcbiAgICBdLCBFZmZlY3RTb3VyY2VzKTtcbiAgICByZXR1cm4gRWZmZWN0U291cmNlcztcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgRWZmZWN0U291cmNlcyB9O1xuZnVuY3Rpb24gZWZmZWN0c0luc3RhbmNlKHNvdXJjZUluc3RhbmNlKSB7XG4gICAgaWYgKG9uSWRlbnRpZnlFZmZlY3RzS2V5IGluIHNvdXJjZUluc3RhbmNlICYmXG4gICAgICAgIHR5cGVvZiBzb3VyY2VJbnN0YW5jZVtvbklkZW50aWZ5RWZmZWN0c0tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUluc3RhbmNlW29uSWRlbnRpZnlFZmZlY3RzS2V5XSgpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5mdW5jdGlvbiByZXNvbHZlRWZmZWN0U291cmNlKGVycm9ySGFuZGxlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlSW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIG1lcmdlZEVmZmVjdHMkID0gbWVyZ2VFZmZlY3RzKHNvdXJjZUluc3RhbmNlLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICBpZiAoaXNPblJ1bkVmZmVjdHMoc291cmNlSW5zdGFuY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlSW5zdGFuY2UubmdyeE9uUnVuRWZmZWN0cyhtZXJnZWRFZmZlY3RzJCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lcmdlZEVmZmVjdHMkO1xuICAgIH07XG59XG5mdW5jdGlvbiBpc09uUnVuRWZmZWN0cyhzb3VyY2VJbnN0YW5jZSkge1xuICAgIHZhciBzb3VyY2UgPSBnZXRTb3VyY2VGb3JJbnN0YW5jZShzb3VyY2VJbnN0YW5jZSk7XG4gICAgcmV0dXJuIChvblJ1bkVmZmVjdHNLZXkgaW4gc291cmNlICYmIHR5cGVvZiBzb3VyY2Vbb25SdW5FZmZlY3RzS2V5XSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG4iXX0=