{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@ngrx/router-store/fesm5/router-store.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8EAyU8E,AACzD;;;;;;;;;;;;;;;6UAMe","file":"router-store.js","sourcesContent":["/**\n * @license NgRx 8.5.2\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { __assign, __read, __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, NgModule, Inject, ErrorHandler } from '@angular/core';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd, Router } from '@angular/router';\nimport { select, Store, createSelector } from '@ngrx/store';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nvar ROUTER_REQUEST = '@ngrx/router-store/request';\n/**\n * An action dispatched when the router navigates.\n */\nvar ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\n/**\n * An action dispatched when the router cancels navigation.\n */\nvar ROUTER_CANCEL = '@ngrx/router-store/cancel';\n/**\n * An action dispatched when the router errors.\n */\nvar ROUTER_ERROR = '@ngrx/router-store/error';\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nvar ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\n\nfunction routerReducer(state, action) {\n    // Allow compilation with strictFunctionTypes - ref: #1344\n    var routerAction = action;\n    switch (routerAction.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: routerAction.payload.routerState,\n                navigationId: routerAction.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\n\nvar RouterStateSerializer = /** @class */ (function () {\n    function RouterStateSerializer() {\n    }\n    return RouterStateSerializer;\n}());\n\nvar DefaultRouterStateSerializer = /** @class */ (function () {\n    function DefaultRouterStateSerializer() {\n    }\n    DefaultRouterStateSerializer.prototype.serialize = function (routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    };\n    DefaultRouterStateSerializer.prototype.serializeRoute = function (route) {\n        var _this = this;\n        var children = route.children.map(function (c) { return _this.serializeRoute(c); });\n        return {\n            params: route.params,\n            paramMap: route.paramMap,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    component: route.routeConfig.component,\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            queryParamMap: route.queryParamMap,\n            fragment: route.fragment,\n            component: (route.routeConfig\n                ? route.routeConfig.component\n                : undefined),\n            root: undefined,\n            parent: undefined,\n            firstChild: children[0],\n            pathFromRoot: undefined,\n            children: children,\n        };\n    };\n    return DefaultRouterStateSerializer;\n}());\n\nvar MinimalRouterStateSerializer = /** @class */ (function () {\n    function MinimalRouterStateSerializer() {\n    }\n    MinimalRouterStateSerializer.prototype.serialize = function (routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    };\n    MinimalRouterStateSerializer.prototype.serializeRoute = function (route) {\n        var _this = this;\n        var children = route.children.map(function (c) { return _this.serializeRoute(c); });\n        return {\n            params: route.params,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            fragment: route.fragment,\n            firstChild: children[0],\n            children: children,\n        };\n    };\n    return MinimalRouterStateSerializer;\n}());\n\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n    NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n    NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nvar _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nvar ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nvar DEFAULT_ROUTER_FEATURENAME = 'router';\nfunction _createRouterConfig(config) {\n    return __assign({ stateKey: DEFAULT_ROUTER_FEATURENAME, serializer: DefaultRouterStateSerializer, navigationActionTiming: NavigationActionTiming.PreActivation }, config);\n}\nvar RouterTrigger;\n(function (RouterTrigger) {\n    RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n    RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n    RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nvar StoreRouterConnectingModule = /** @class */ (function () {\n    function StoreRouterConnectingModule(store, router, serializer, errorHandler, config) {\n        this.store = store;\n        this.router = router;\n        this.serializer = serializer;\n        this.errorHandler = errorHandler;\n        this.config = config;\n        this.lastEvent = null;\n        this.trigger = RouterTrigger.NONE;\n        this.stateKey = this.config.stateKey;\n        this.setUpStoreStateListener();\n        this.setUpRouterEventsListener();\n    }\n    StoreRouterConnectingModule_1 = StoreRouterConnectingModule;\n    StoreRouterConnectingModule.forRoot = function (config) {\n        if (config === void 0) { config = {}; }\n        return {\n            ngModule: StoreRouterConnectingModule_1,\n            providers: [\n                { provide: _ROUTER_CONFIG, useValue: config },\n                {\n                    provide: ROUTER_CONFIG,\n                    useFactory: _createRouterConfig,\n                    deps: [_ROUTER_CONFIG],\n                },\n                {\n                    provide: RouterStateSerializer,\n                    useClass: config.serializer\n                        ? config.serializer\n                        : config.routerState === 1 /* Minimal */\n                            ? MinimalRouterStateSerializer\n                            : DefaultRouterStateSerializer,\n                },\n            ],\n        };\n    };\n    StoreRouterConnectingModule.prototype.setUpStoreStateListener = function () {\n        var _this = this;\n        this.store\n            .pipe(select(this.stateKey), withLatestFrom(this.store))\n            .subscribe(function (_a) {\n            var _b = __read(_a, 2), routerStoreState = _b[0], storeState = _b[1];\n            _this.navigateIfNeeded(routerStoreState, storeState);\n        });\n    };\n    StoreRouterConnectingModule.prototype.navigateIfNeeded = function (routerStoreState, storeState) {\n        var _this = this;\n        if (!routerStoreState || !routerStoreState.state) {\n            return;\n        }\n        if (this.trigger === RouterTrigger.ROUTER) {\n            return;\n        }\n        if (this.lastEvent instanceof NavigationStart) {\n            return;\n        }\n        var url = routerStoreState.state.url;\n        if (this.router.url !== url) {\n            this.storeState = storeState;\n            this.trigger = RouterTrigger.STORE;\n            this.router.navigateByUrl(url).catch(function (error) {\n                _this.errorHandler.handleError(error);\n            });\n        }\n    };\n    StoreRouterConnectingModule.prototype.setUpRouterEventsListener = function () {\n        var _this = this;\n        var dispatchNavLate = this.config.navigationActionTiming ===\n            NavigationActionTiming.PostActivation;\n        var routesRecognized;\n        this.router.events\n            .pipe(withLatestFrom(this.store))\n            .subscribe(function (_a) {\n            var _b = __read(_a, 2), event = _b[0], storeState = _b[1];\n            _this.lastEvent = event;\n            if (event instanceof NavigationStart) {\n                _this.routerState = _this.serializer.serialize(_this.router.routerState.snapshot);\n                if (_this.trigger !== RouterTrigger.STORE) {\n                    _this.storeState = storeState;\n                    _this.dispatchRouterRequest(event);\n                }\n            }\n            else if (event instanceof RoutesRecognized) {\n                routesRecognized = event;\n                if (!dispatchNavLate && _this.trigger !== RouterTrigger.STORE) {\n                    _this.dispatchRouterNavigation(event);\n                }\n            }\n            else if (event instanceof NavigationCancel) {\n                _this.dispatchRouterCancel(event);\n                _this.reset();\n            }\n            else if (event instanceof NavigationError) {\n                _this.dispatchRouterError(event);\n                _this.reset();\n            }\n            else if (event instanceof NavigationEnd) {\n                if (_this.trigger !== RouterTrigger.STORE) {\n                    if (dispatchNavLate) {\n                        _this.dispatchRouterNavigation(routesRecognized);\n                    }\n                    _this.dispatchRouterNavigated(event);\n                }\n                _this.reset();\n            }\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterRequest = function (event) {\n        this.dispatchRouterAction(ROUTER_REQUEST, { event: event });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterNavigation = function (lastRoutesRecognized) {\n        var nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: nextRouterState,\n            event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState),\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterCancel = function (event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            storeState: this.storeState,\n            event: event,\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterError = function (event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, \"\" + event),\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterNavigated = function (event) {\n        var routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        this.dispatchRouterAction(ROUTER_NAVIGATED, { event: event, routerState: routerState });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterAction = function (type, payload) {\n        this.trigger = RouterTrigger.ROUTER;\n        try {\n            this.store.dispatch({\n                type: type,\n                payload: __assign({ routerState: this.routerState }, payload, { event: this.config.routerState === 1 /* Minimal */\n                        ? { id: payload.event.id, url: payload.event.url }\n                        : payload.event }),\n            });\n        }\n        finally {\n            this.trigger = RouterTrigger.NONE;\n        }\n    };\n    StoreRouterConnectingModule.prototype.reset = function () {\n        this.trigger = RouterTrigger.NONE;\n        this.storeState = null;\n        this.routerState = null;\n    };\n    var StoreRouterConnectingModule_1;\n    StoreRouterConnectingModule = StoreRouterConnectingModule_1 = __decorate([\n        NgModule({}),\n        __param(4, Inject(ROUTER_CONFIG)),\n        __metadata(\"design:paramtypes\", [Store,\n            Router,\n            RouterStateSerializer,\n            ErrorHandler, Object])\n    ], StoreRouterConnectingModule);\n    return StoreRouterConnectingModule;\n}());\n\nfunction getSelectors(selectState) {\n    var selectRouterState = createSelector(selectState, function (router) { return router && router.state; });\n    var selectCurrentRoute = createSelector(selectRouterState, function (routerState) {\n        if (!routerState) {\n            return undefined;\n        }\n        var route = routerState.root;\n        while (route.firstChild) {\n            route = route.firstChild;\n        }\n        return route;\n    });\n    var selectQueryParams = createSelector(selectCurrentRoute, function (route) { return route && route.queryParams; });\n    var selectQueryParam = function (param) {\n        return createSelector(selectQueryParams, function (params) { return params && params[param]; });\n    };\n    var selectRouteParams = createSelector(selectCurrentRoute, function (route) { return route && route.params; });\n    var selectRouteParam = function (param) {\n        return createSelector(selectRouteParams, function (params) { return params && params[param]; });\n    };\n    var selectRouteData = createSelector(selectCurrentRoute, function (route) { return route && route.data; });\n    var selectUrl = createSelector(selectRouterState, function (routerState) { return routerState && routerState.url; });\n    return {\n        selectCurrentRoute: selectCurrentRoute,\n        selectQueryParams: selectQueryParams,\n        selectQueryParam: selectQueryParam,\n        selectRouteParams: selectRouteParams,\n        selectRouteParam: selectRouteParam,\n        selectRouteData: selectRouteData,\n        selectUrl: selectUrl,\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { _ROUTER_CONFIG as ɵngrx_modules_router_store_router_store_a, _createRouterConfig as ɵngrx_modules_router_store_router_store_b, ROUTER_ERROR, ROUTER_CANCEL, ROUTER_NAVIGATION, ROUTER_NAVIGATED, ROUTER_REQUEST, routerReducer, StoreRouterConnectingModule, NavigationActionTiming, ROUTER_CONFIG, DEFAULT_ROUTER_FEATURENAME, RouterStateSerializer, DefaultRouterStateSerializer, MinimalRouterStateSerializer, getSelectors };\n"]}