{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@ngrx/router-store/bundles/router-store.umd.js"],"names":[],"mappings":"AAAA;;;;;;sOAM6M;sLACvC;;yEAEpG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0FA6UwB,AAC5D;;;;;;;;;;;;;;;+VAMU","file":"router-store.umd.js","sourcesContent":["/**\n * @license NgRx 8.5.2\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('@angular/router'), require('@ngrx/store'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/router-store', ['exports', 'tslib', '@angular/core', '@angular/router', '@ngrx/store', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.routerStore = {}), global.tslib, global.ng.core, global.ng.router, global['@ngrx/store'], global.rxjs.operators));\n}(this, function (exports, tslib_1, core, router, store, operators) { 'use strict';\n\n    /**\n     * An action dispatched when a router navigation request is fired.\n     */\n    var ROUTER_REQUEST = '@ngrx/router-store/request';\n    /**\n     * An action dispatched when the router navigates.\n     */\n    var ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\n    /**\n     * An action dispatched when the router cancels navigation.\n     */\n    var ROUTER_CANCEL = '@ngrx/router-store/cancel';\n    /**\n     * An action dispatched when the router errors.\n     */\n    var ROUTER_ERROR = '@ngrx/router-store/error';\n    /**\n     * An action dispatched after navigation has ended and new route is active.\n     */\n    var ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\n\n    function routerReducer(state, action) {\n        // Allow compilation with strictFunctionTypes - ref: #1344\n        var routerAction = action;\n        switch (routerAction.type) {\n            case ROUTER_NAVIGATION:\n            case ROUTER_ERROR:\n            case ROUTER_CANCEL:\n                return {\n                    state: routerAction.payload.routerState,\n                    navigationId: routerAction.payload.event.id,\n                };\n            default:\n                return state;\n        }\n    }\n\n    var RouterStateSerializer = /** @class */ (function () {\n        function RouterStateSerializer() {\n        }\n        return RouterStateSerializer;\n    }());\n\n    var DefaultRouterStateSerializer = /** @class */ (function () {\n        function DefaultRouterStateSerializer() {\n        }\n        DefaultRouterStateSerializer.prototype.serialize = function (routerState) {\n            return {\n                root: this.serializeRoute(routerState.root),\n                url: routerState.url,\n            };\n        };\n        DefaultRouterStateSerializer.prototype.serializeRoute = function (route) {\n            var _this = this;\n            var children = route.children.map(function (c) { return _this.serializeRoute(c); });\n            return {\n                params: route.params,\n                paramMap: route.paramMap,\n                data: route.data,\n                url: route.url,\n                outlet: route.outlet,\n                routeConfig: route.routeConfig\n                    ? {\n                        component: route.routeConfig.component,\n                        path: route.routeConfig.path,\n                        pathMatch: route.routeConfig.pathMatch,\n                        redirectTo: route.routeConfig.redirectTo,\n                        outlet: route.routeConfig.outlet,\n                    }\n                    : null,\n                queryParams: route.queryParams,\n                queryParamMap: route.queryParamMap,\n                fragment: route.fragment,\n                component: (route.routeConfig\n                    ? route.routeConfig.component\n                    : undefined),\n                root: undefined,\n                parent: undefined,\n                firstChild: children[0],\n                pathFromRoot: undefined,\n                children: children,\n            };\n        };\n        return DefaultRouterStateSerializer;\n    }());\n\n    var MinimalRouterStateSerializer = /** @class */ (function () {\n        function MinimalRouterStateSerializer() {\n        }\n        MinimalRouterStateSerializer.prototype.serialize = function (routerState) {\n            return {\n                root: this.serializeRoute(routerState.root),\n                url: routerState.url,\n            };\n        };\n        MinimalRouterStateSerializer.prototype.serializeRoute = function (route) {\n            var _this = this;\n            var children = route.children.map(function (c) { return _this.serializeRoute(c); });\n            return {\n                params: route.params,\n                data: route.data,\n                url: route.url,\n                outlet: route.outlet,\n                routeConfig: route.routeConfig\n                    ? {\n                        path: route.routeConfig.path,\n                        pathMatch: route.routeConfig.pathMatch,\n                        redirectTo: route.routeConfig.redirectTo,\n                        outlet: route.routeConfig.outlet,\n                    }\n                    : null,\n                queryParams: route.queryParams,\n                fragment: route.fragment,\n                firstChild: children[0],\n                children: children,\n            };\n        };\n        return MinimalRouterStateSerializer;\n    }());\n\n    (function (NavigationActionTiming) {\n        NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n        NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n    })(exports.NavigationActionTiming || (exports.NavigationActionTiming = {}));\n    var _ROUTER_CONFIG = new core.InjectionToken('@ngrx/router-store Internal Configuration');\n    var ROUTER_CONFIG = new core.InjectionToken('@ngrx/router-store Configuration');\n    var DEFAULT_ROUTER_FEATURENAME = 'router';\n    function _createRouterConfig(config) {\n        return tslib_1.__assign({ stateKey: DEFAULT_ROUTER_FEATURENAME, serializer: DefaultRouterStateSerializer, navigationActionTiming: exports.NavigationActionTiming.PreActivation }, config);\n    }\n    var RouterTrigger;\n    (function (RouterTrigger) {\n        RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n        RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n        RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n    })(RouterTrigger || (RouterTrigger = {}));\n    /**\n     * Connects RouterModule with StoreModule.\n     *\n     * During the navigation, before any guards or resolvers run, the router will dispatch\n     * a ROUTER_NAVIGATION action, which has the following signature:\n     *\n     * ```\n     * export type RouterNavigationPayload = {\n     *   routerState: SerializedRouterStateSnapshot,\n     *   event: RoutesRecognized\n     * }\n     * ```\n     *\n     * Either a reducer or an effect can be invoked in response to this action.\n     * If the invoked reducer throws, the navigation will be canceled.\n     *\n     * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n     * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n     *\n     * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n     * which can be used to restore the consistency of the store.\n     *\n     * Usage:\n     *\n     * ```typescript\n     * @NgModule({\n     *   declarations: [AppCmp, SimpleCmp],\n     *   imports: [\n     *     BrowserModule,\n     *     StoreModule.forRoot(mapOfReducers),\n     *     RouterModule.forRoot([\n     *       { path: '', component: SimpleCmp },\n     *       { path: 'next', component: SimpleCmp }\n     *     ]),\n     *     StoreRouterConnectingModule.forRoot()\n     *   ],\n     *   bootstrap: [AppCmp]\n     * })\n     * export class AppModule {\n     * }\n     * ```\n     */\n    var StoreRouterConnectingModule = /** @class */ (function () {\n        function StoreRouterConnectingModule(store, router, serializer, errorHandler, config) {\n            this.store = store;\n            this.router = router;\n            this.serializer = serializer;\n            this.errorHandler = errorHandler;\n            this.config = config;\n            this.lastEvent = null;\n            this.trigger = RouterTrigger.NONE;\n            this.stateKey = this.config.stateKey;\n            this.setUpStoreStateListener();\n            this.setUpRouterEventsListener();\n        }\n        StoreRouterConnectingModule_1 = StoreRouterConnectingModule;\n        StoreRouterConnectingModule.forRoot = function (config) {\n            if (config === void 0) { config = {}; }\n            return {\n                ngModule: StoreRouterConnectingModule_1,\n                providers: [\n                    { provide: _ROUTER_CONFIG, useValue: config },\n                    {\n                        provide: ROUTER_CONFIG,\n                        useFactory: _createRouterConfig,\n                        deps: [_ROUTER_CONFIG],\n                    },\n                    {\n                        provide: RouterStateSerializer,\n                        useClass: config.serializer\n                            ? config.serializer\n                            : config.routerState === 1 /* Minimal */\n                                ? MinimalRouterStateSerializer\n                                : DefaultRouterStateSerializer,\n                    },\n                ],\n            };\n        };\n        StoreRouterConnectingModule.prototype.setUpStoreStateListener = function () {\n            var _this = this;\n            this.store\n                .pipe(store.select(this.stateKey), operators.withLatestFrom(this.store))\n                .subscribe(function (_a) {\n                var _b = tslib_1.__read(_a, 2), routerStoreState = _b[0], storeState = _b[1];\n                _this.navigateIfNeeded(routerStoreState, storeState);\n            });\n        };\n        StoreRouterConnectingModule.prototype.navigateIfNeeded = function (routerStoreState, storeState) {\n            var _this = this;\n            if (!routerStoreState || !routerStoreState.state) {\n                return;\n            }\n            if (this.trigger === RouterTrigger.ROUTER) {\n                return;\n            }\n            if (this.lastEvent instanceof router.NavigationStart) {\n                return;\n            }\n            var url = routerStoreState.state.url;\n            if (this.router.url !== url) {\n                this.storeState = storeState;\n                this.trigger = RouterTrigger.STORE;\n                this.router.navigateByUrl(url).catch(function (error) {\n                    _this.errorHandler.handleError(error);\n                });\n            }\n        };\n        StoreRouterConnectingModule.prototype.setUpRouterEventsListener = function () {\n            var _this = this;\n            var dispatchNavLate = this.config.navigationActionTiming ===\n                exports.NavigationActionTiming.PostActivation;\n            var routesRecognized;\n            this.router.events\n                .pipe(operators.withLatestFrom(this.store))\n                .subscribe(function (_a) {\n                var _b = tslib_1.__read(_a, 2), event = _b[0], storeState = _b[1];\n                _this.lastEvent = event;\n                if (event instanceof router.NavigationStart) {\n                    _this.routerState = _this.serializer.serialize(_this.router.routerState.snapshot);\n                    if (_this.trigger !== RouterTrigger.STORE) {\n                        _this.storeState = storeState;\n                        _this.dispatchRouterRequest(event);\n                    }\n                }\n                else if (event instanceof router.RoutesRecognized) {\n                    routesRecognized = event;\n                    if (!dispatchNavLate && _this.trigger !== RouterTrigger.STORE) {\n                        _this.dispatchRouterNavigation(event);\n                    }\n                }\n                else if (event instanceof router.NavigationCancel) {\n                    _this.dispatchRouterCancel(event);\n                    _this.reset();\n                }\n                else if (event instanceof router.NavigationError) {\n                    _this.dispatchRouterError(event);\n                    _this.reset();\n                }\n                else if (event instanceof router.NavigationEnd) {\n                    if (_this.trigger !== RouterTrigger.STORE) {\n                        if (dispatchNavLate) {\n                            _this.dispatchRouterNavigation(routesRecognized);\n                        }\n                        _this.dispatchRouterNavigated(event);\n                    }\n                    _this.reset();\n                }\n            });\n        };\n        StoreRouterConnectingModule.prototype.dispatchRouterRequest = function (event) {\n            this.dispatchRouterAction(ROUTER_REQUEST, { event: event });\n        };\n        StoreRouterConnectingModule.prototype.dispatchRouterNavigation = function (lastRoutesRecognized) {\n            var nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n            this.dispatchRouterAction(ROUTER_NAVIGATION, {\n                routerState: nextRouterState,\n                event: new router.RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState),\n            });\n        };\n        StoreRouterConnectingModule.prototype.dispatchRouterCancel = function (event) {\n            this.dispatchRouterAction(ROUTER_CANCEL, {\n                storeState: this.storeState,\n                event: event,\n            });\n        };\n        StoreRouterConnectingModule.prototype.dispatchRouterError = function (event) {\n            this.dispatchRouterAction(ROUTER_ERROR, {\n                storeState: this.storeState,\n                event: new router.NavigationError(event.id, event.url, \"\" + event),\n            });\n        };\n        StoreRouterConnectingModule.prototype.dispatchRouterNavigated = function (event) {\n            var routerState = this.serializer.serialize(this.router.routerState.snapshot);\n            this.dispatchRouterAction(ROUTER_NAVIGATED, { event: event, routerState: routerState });\n        };\n        StoreRouterConnectingModule.prototype.dispatchRouterAction = function (type, payload) {\n            this.trigger = RouterTrigger.ROUTER;\n            try {\n                this.store.dispatch({\n                    type: type,\n                    payload: tslib_1.__assign({ routerState: this.routerState }, payload, { event: this.config.routerState === 1 /* Minimal */\n                            ? { id: payload.event.id, url: payload.event.url }\n                            : payload.event }),\n                });\n            }\n            finally {\n                this.trigger = RouterTrigger.NONE;\n            }\n        };\n        StoreRouterConnectingModule.prototype.reset = function () {\n            this.trigger = RouterTrigger.NONE;\n            this.storeState = null;\n            this.routerState = null;\n        };\n        var StoreRouterConnectingModule_1;\n        StoreRouterConnectingModule = StoreRouterConnectingModule_1 = tslib_1.__decorate([\n            core.NgModule({}),\n            tslib_1.__param(4, core.Inject(ROUTER_CONFIG)),\n            tslib_1.__metadata(\"design:paramtypes\", [store.Store,\n                router.Router,\n                RouterStateSerializer,\n                core.ErrorHandler, Object])\n        ], StoreRouterConnectingModule);\n        return StoreRouterConnectingModule;\n    }());\n\n    function getSelectors(selectState) {\n        var selectRouterState = store.createSelector(selectState, function (router) { return router && router.state; });\n        var selectCurrentRoute = store.createSelector(selectRouterState, function (routerState) {\n            if (!routerState) {\n                return undefined;\n            }\n            var route = routerState.root;\n            while (route.firstChild) {\n                route = route.firstChild;\n            }\n            return route;\n        });\n        var selectQueryParams = store.createSelector(selectCurrentRoute, function (route) { return route && route.queryParams; });\n        var selectQueryParam = function (param) {\n            return store.createSelector(selectQueryParams, function (params) { return params && params[param]; });\n        };\n        var selectRouteParams = store.createSelector(selectCurrentRoute, function (route) { return route && route.params; });\n        var selectRouteParam = function (param) {\n            return store.createSelector(selectRouteParams, function (params) { return params && params[param]; });\n        };\n        var selectRouteData = store.createSelector(selectCurrentRoute, function (route) { return route && route.data; });\n        var selectUrl = store.createSelector(selectRouterState, function (routerState) { return routerState && routerState.url; });\n        return {\n            selectCurrentRoute: selectCurrentRoute,\n            selectQueryParams: selectQueryParams,\n            selectQueryParam: selectQueryParam,\n            selectRouteParams: selectRouteParams,\n            selectRouteParam: selectRouteParam,\n            selectRouteData: selectRouteData,\n            selectUrl: selectUrl,\n        };\n    }\n\n    /**\n     * DO NOT EDIT\n     *\n     * This file is automatically generated at build\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵngrx_modules_router_store_router_store_a = _ROUTER_CONFIG;\n    exports.ɵngrx_modules_router_store_router_store_b = _createRouterConfig;\n    exports.ROUTER_ERROR = ROUTER_ERROR;\n    exports.ROUTER_CANCEL = ROUTER_CANCEL;\n    exports.ROUTER_NAVIGATION = ROUTER_NAVIGATION;\n    exports.ROUTER_NAVIGATED = ROUTER_NAVIGATED;\n    exports.ROUTER_REQUEST = ROUTER_REQUEST;\n    exports.routerReducer = routerReducer;\n    exports.StoreRouterConnectingModule = StoreRouterConnectingModule;\n    exports.ROUTER_CONFIG = ROUTER_CONFIG;\n    exports.DEFAULT_ROUTER_FEATURENAME = DEFAULT_ROUTER_FEATURENAME;\n    exports.RouterStateSerializer = RouterStateSerializer;\n    exports.DefaultRouterStateSerializer = DefaultRouterStateSerializer;\n    exports.MinimalRouterStateSerializer = MinimalRouterStateSerializer;\n    exports.getSelectors = getSelectors;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}