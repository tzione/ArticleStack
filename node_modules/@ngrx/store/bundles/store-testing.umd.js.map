{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@ngrx/store/bundles/store-testing.umd.js"],"names":[],"mappings":"AAAA;;;;;;kOAMyM;mLACtC;;qEAErG;;;;;;;wCAOtB,AACV;;;;;;0CAER;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAkFgC,AACxB;;;;;;;;;;;;;;;;kKAMR;;;;;;;;;iDAS2B,AACnB;;;;;;0CAEC","file":"store-testing.umd.js","sourcesContent":["/**\n * @license NgRx 8.5.1\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('rxjs'), require('@ngrx/store'), require('@angular/core/testing')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/store/testing', ['exports', 'tslib', '@angular/core', 'rxjs', '@ngrx/store', '@angular/core/testing'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.store = global.ngrx.store || {}, global.ngrx.store.testing = {}), global.tslib, global.ng.core, global.rxjs, global['@ngrx/store'], global.ng.core.testing));\n}(this, function (exports, tslib_1, core, rxjs, store, testing) { 'use strict';\n\n    var MockState = /** @class */ (function (_super) {\n        tslib_1.__extends(MockState, _super);\n        function MockState() {\n            return _super.call(this, {}) || this;\n        }\n        MockState = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__metadata(\"design:paramtypes\", [])\n        ], MockState);\n        return MockState;\n    }(rxjs.BehaviorSubject));\n\n    var MOCK_SELECTORS = new core.InjectionToken('@ngrx/store Mock Selectors');\n\n    if (typeof afterEach === 'function') {\n        afterEach(function () {\n            try {\n                var store$1 = testing.TestBed.get(store.Store);\n                if (store$1 && 'resetSelectors' in store$1) {\n                    store$1.resetSelectors();\n                }\n            }\n            catch (_a) { }\n        });\n    }\n    var MockStore = /** @class */ (function (_super) {\n        tslib_1.__extends(MockStore, _super);\n        function MockStore(state$, actionsObserver, reducerManager, initialState, mockSelectors) {\n            var _this = _super.call(this, state$, actionsObserver, reducerManager) || this;\n            _this.state$ = state$;\n            _this.initialState = initialState;\n            _this.resetSelectors();\n            _this.setState(_this.initialState);\n            _this.scannedActions$ = actionsObserver.asObservable();\n            if (mockSelectors) {\n                mockSelectors.forEach(function (mockSelector) {\n                    var selector = mockSelector.selector;\n                    if (typeof selector === 'string') {\n                        _this.overrideSelector(selector, mockSelector.value);\n                    }\n                    else {\n                        _this.overrideSelector(selector, mockSelector.value);\n                    }\n                });\n            }\n            return _this;\n        }\n        MockStore_1 = MockStore;\n        MockStore.prototype.setState = function (nextState) {\n            this.state$.next(nextState);\n            this.lastState = nextState;\n        };\n        MockStore.prototype.overrideSelector = function (selector, value) {\n            MockStore_1.selectors.set(selector, value);\n            if (typeof selector === 'string') {\n                var stringSelector = store.createSelector(function () { }, function () { return value; });\n                return stringSelector;\n            }\n            selector.setResult(value);\n            return selector;\n        };\n        MockStore.prototype.resetSelectors = function () {\n            MockStore_1.selectors.forEach(function (_, selector) {\n                if (typeof selector !== 'string') {\n                    selector.release();\n                    selector.setResult();\n                }\n            });\n            MockStore_1.selectors.clear();\n        };\n        MockStore.prototype.select = function (selector, prop) {\n            if (typeof selector === 'string' && MockStore_1.selectors.has(selector)) {\n                return new rxjs.BehaviorSubject(MockStore_1.selectors.get(selector)).asObservable();\n            }\n            return _super.prototype.select.call(this, selector, prop);\n        };\n        MockStore.prototype.addReducer = function () {\n            /* noop */\n        };\n        MockStore.prototype.removeReducer = function () {\n            /* noop */\n        };\n        /**\n         * Refreshes the existing state.\n         */\n        MockStore.prototype.refreshState = function () {\n            this.setState(tslib_1.__assign({}, this.lastState));\n        };\n        var MockStore_1;\n        MockStore.selectors = new Map();\n        MockStore = MockStore_1 = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__param(3, core.Inject(store.INITIAL_STATE)),\n            tslib_1.__param(4, core.Inject(MOCK_SELECTORS)),\n            tslib_1.__metadata(\"design:paramtypes\", [MockState,\n                store.ActionsSubject,\n                store.ReducerManager, Object, Array])\n        ], MockStore);\n        return MockStore;\n    }(store.Store));\n\n    var MockReducerManager = /** @class */ (function (_super) {\n        tslib_1.__extends(MockReducerManager, _super);\n        function MockReducerManager() {\n            return _super.call(this, function () { return undefined; }) || this;\n        }\n        MockReducerManager = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__metadata(\"design:paramtypes\", [])\n        ], MockReducerManager);\n        return MockReducerManager;\n    }(rxjs.BehaviorSubject));\n\n    function provideMockStore(config) {\n        if (config === void 0) { config = {}; }\n        return [\n            store.ActionsSubject,\n            MockState,\n            { provide: store.INITIAL_STATE, useValue: config.initialState || {} },\n            { provide: MOCK_SELECTORS, useValue: config.selectors },\n            { provide: store.StateObservable, useClass: MockState },\n            { provide: store.ReducerManager, useClass: MockReducerManager },\n            { provide: store.Store, useClass: MockStore },\n        ];\n    }\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵngrx_modules_store_testing_testing_a = MOCK_SELECTORS;\n    exports.provideMockStore = provideMockStore;\n    exports.MockReducerManager = MockReducerManager;\n    exports.MockState = MockState;\n    exports.MockStore = MockStore;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}