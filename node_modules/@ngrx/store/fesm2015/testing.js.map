{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@ngrx/store/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;CAIC,wDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sOA8ID;gCAC+B,AAG9B;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,wDAGC","file":"testing.js","sourcesContent":["/**\n * @license NgRx 8.5.1\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Store, createSelector, ActionsSubject, ReducerManager, INITIAL_STATE, StateObservable } from '@ngrx/store';\nimport { TestBed } from '@angular/core/testing';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass MockState extends BehaviorSubject {\n    constructor() {\n        super((/** @type {?} */ ({})));\n    }\n}\nMockState.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMockState.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nif (typeof afterEach === 'function') {\n    afterEach((/**\n     * @return {?}\n     */\n    () => {\n        try {\n            /** @type {?} */\n            const store = (/** @type {?} */ (TestBed.get(Store)));\n            if (store && 'resetSelectors' in store) {\n                store.resetSelectors();\n            }\n        }\n        catch (_a) { }\n    }));\n}\n/**\n * @template T\n */\nclass MockStore extends Store {\n    /**\n     * @param {?} state$\n     * @param {?} actionsObserver\n     * @param {?} reducerManager\n     * @param {?} initialState\n     * @param {?=} mockSelectors\n     */\n    constructor(state$, actionsObserver, reducerManager, initialState, mockSelectors) {\n        super(state$, actionsObserver, reducerManager);\n        this.state$ = state$;\n        this.initialState = initialState;\n        this.resetSelectors();\n        this.setState(this.initialState);\n        this.scannedActions$ = actionsObserver.asObservable();\n        if (mockSelectors) {\n            mockSelectors.forEach((/**\n             * @param {?} mockSelector\n             * @return {?}\n             */\n            mockSelector => {\n                /** @type {?} */\n                const selector = mockSelector.selector;\n                if (typeof selector === 'string') {\n                    this.overrideSelector(selector, mockSelector.value);\n                }\n                else {\n                    this.overrideSelector(selector, mockSelector.value);\n                }\n            }));\n        }\n    }\n    /**\n     * @param {?} nextState\n     * @return {?}\n     */\n    setState(nextState) {\n        this.state$.next(nextState);\n        this.lastState = nextState;\n    }\n    /**\n     * @template T, Result\n     * @param {?} selector\n     * @param {?} value\n     * @return {?}\n     */\n    overrideSelector(selector, value) {\n        MockStore.selectors.set(selector, value);\n        if (typeof selector === 'string') {\n            /** @type {?} */\n            const stringSelector = createSelector((/**\n             * @return {?}\n             */\n            () => { }), (/**\n             * @return {?}\n             */\n            () => value));\n            return stringSelector;\n        }\n        selector.setResult(value);\n        return selector;\n    }\n    /**\n     * @return {?}\n     */\n    resetSelectors() {\n        MockStore.selectors.forEach((/**\n         * @param {?} _\n         * @param {?} selector\n         * @return {?}\n         */\n        (_, selector) => {\n            if (typeof selector !== 'string') {\n                selector.release();\n                selector.setResult();\n            }\n        }));\n        MockStore.selectors.clear();\n    }\n    /**\n     * @param {?} selector\n     * @param {?=} prop\n     * @return {?}\n     */\n    select(selector, prop) {\n        if (typeof selector === 'string' && MockStore.selectors.has(selector)) {\n            return new BehaviorSubject(MockStore.selectors.get(selector)).asObservable();\n        }\n        return super.select(selector, prop);\n    }\n    /**\n     * @return {?}\n     */\n    addReducer() {\n        /* noop */\n    }\n    /**\n     * @return {?}\n     */\n    removeReducer() {\n        /* noop */\n    }\n    /**\n     * Refreshes the existing state.\n     * @return {?}\n     */\n    refreshState() {\n        this.setState(Object.assign({}, ((/** @type {?} */ (this.lastState)))));\n    }\n}\nMockStore.selectors = new Map();\nMockStore.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMockStore.ctorParameters = () => [\n    { type: MockState },\n    { type: ActionsSubject },\n    { type: ReducerManager },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },\n    { type: Array, decorators: [{ type: Inject, args: [MOCK_SELECTORS,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MockReducerManager extends BehaviorSubject {\n    constructor() {\n        super((/**\n         * @return {?}\n         */\n        () => undefined));\n    }\n}\nMockReducerManager.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMockReducerManager.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?=} config\n * @return {?}\n */\nfunction provideMockStore(config = {}) {\n    return [\n        ActionsSubject,\n        MockState,\n        { provide: INITIAL_STATE, useValue: config.initialState || {} },\n        { provide: MOCK_SELECTORS, useValue: config.selectors },\n        { provide: StateObservable, useClass: MockState },\n        { provide: ReducerManager, useClass: MockReducerManager },\n        { provide: Store, useClass: MockStore },\n    ];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_SELECTORS as ɵngrx_modules_store_testing_testing_a, provideMockStore, MockReducerManager, MockState, MockStore };\n"]}