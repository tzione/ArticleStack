/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { BehaviorSubject } from 'rxjs';
import { ActionsSubject, INITIAL_STATE, ReducerManager, Store, createSelector, } from '@ngrx/store';
import { MockState } from './mock_state';
import { MOCK_SELECTORS } from './tokens';
import * as ɵngcc0 from '@angular/core';
if (typeof afterEach === 'function') {
    afterEach((/**
     * @return {?}
     */
    () => {
        try {
            /** @type {?} */
            const store = (/** @type {?} */ (TestBed.get(Store)));
            if (store && 'resetSelectors' in store) {
                store.resetSelectors();
            }
        }
        catch (_a) { }
    }));
}
/**
 * @template T
 */
export class MockStore extends Store {
    /**
     * @param {?} state$
     * @param {?} actionsObserver
     * @param {?} reducerManager
     * @param {?} initialState
     * @param {?=} mockSelectors
     */
    constructor(state$, actionsObserver, reducerManager, initialState, mockSelectors) {
        super(state$, actionsObserver, reducerManager);
        this.state$ = state$;
        this.initialState = initialState;
        this.resetSelectors();
        this.setState(this.initialState);
        this.scannedActions$ = actionsObserver.asObservable();
        if (mockSelectors) {
            mockSelectors.forEach((/**
             * @param {?} mockSelector
             * @return {?}
             */
            mockSelector => {
                /** @type {?} */
                const selector = mockSelector.selector;
                if (typeof selector === 'string') {
                    this.overrideSelector(selector, mockSelector.value);
                }
                else {
                    this.overrideSelector(selector, mockSelector.value);
                }
            }));
        }
    }
    /**
     * @param {?} nextState
     * @return {?}
     */
    setState(nextState) {
        this.state$.next(nextState);
        this.lastState = nextState;
    }
    /**
     * @template T, Result
     * @param {?} selector
     * @param {?} value
     * @return {?}
     */
    overrideSelector(selector, value) {
        MockStore.selectors.set(selector, value);
        if (typeof selector === 'string') {
            /** @type {?} */
            const stringSelector = createSelector((/**
             * @return {?}
             */
            () => { }), (/**
             * @return {?}
             */
            () => value));
            return stringSelector;
        }
        selector.setResult(value);
        return selector;
    }
    /**
     * @return {?}
     */
    resetSelectors() {
        MockStore.selectors.forEach((/**
         * @param {?} _
         * @param {?} selector
         * @return {?}
         */
        (_, selector) => {
            if (typeof selector !== 'string') {
                selector.release();
                selector.setResult();
            }
        }));
        MockStore.selectors.clear();
    }
    /**
     * @param {?} selector
     * @param {?=} prop
     * @return {?}
     */
    select(selector, prop) {
        if (typeof selector === 'string' && MockStore.selectors.has(selector)) {
            return new BehaviorSubject(MockStore.selectors.get(selector)).asObservable();
        }
        return super.select(selector, prop);
    }
    /**
     * @return {?}
     */
    addReducer() {
        /* noop */
    }
    /**
     * @return {?}
     */
    removeReducer() {
        /* noop */
    }
    /**
     * Refreshes the existing state.
     * @return {?}
     */
    refreshState() {
        this.setState(Object.assign({}, ((/** @type {?} */ (this.lastState)))));
    }
}
MockStore.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: MockStore, factory: function MockStore_Factory(t) { return new (t || MockStore)(ɵngcc0.ɵɵinject(MockState), ɵngcc0.ɵɵinject(ActionsSubject), ɵngcc0.ɵɵinject(ReducerManager), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(MOCK_SELECTORS)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MockStore, [{
        type: Injectable
    }], function () { return [{ type: MockState }, { type: ActionsSubject }, { type: ReducerManager }, { type: undefined, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: Array, decorators: [{
                type: Inject,
                args: [MOCK_SELECTORS]
            }] }]; }, { constructor: [], state$: [], initialState: [], scannedActions$: [], setState: [], lastState: [], overrideSelector: [], resetSelectors: [], select: [], addReducer: [], removeReducer: [], refreshState: [] });
MockStore.selectors = new Map();
/** @nocollapse */
MockStore.ctorParameters = () => [
    { type: MockState },
    { type: ActionsSubject },
    { type: ReducerManager },
    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },
    { type: Array, decorators: [{ type: Inject, args: [MOCK_SELECTORS,] }] }
];
if (false) {
    /** @type {?} */
    MockStore.selectors;
    /** @type {?} */
    MockStore.prototype.scannedActions$;
    /**
     * @type {?}
     * @private
     */
    MockStore.prototype.lastState;
    /**
     * @type {?}
     * @private
     */
    MockStore.prototype.state$;
    /**
     * @type {?}
     * @private
     */
    MockStore.prototype.initialState;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtMjAxNS90ZXN0aW5nL3NyYy9tb2NrX3N0b3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzT0ErSEM7Z0NBQytCLEFBRzlCIiwiZmlsZSI6Im1vY2tfc3RvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aW9uc1N1YmplY3QsIElOSVRJQUxfU1RBVEUsIFJlZHVjZXJNYW5hZ2VyLCBTdG9yZSwgY3JlYXRlU2VsZWN0b3IsIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgTW9ja1N0YXRlIH0gZnJvbSAnLi9tb2NrX3N0YXRlJztcbmltcG9ydCB7IE1PQ0tfU0VMRUNUT1JTIH0gZnJvbSAnLi90b2tlbnMnO1xuaWYgKHR5cGVvZiBhZnRlckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBhZnRlckVhY2goKC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSAoLyoqIEB0eXBlIHs/fSAqLyAoVGVzdEJlZC5nZXQoU3RvcmUpKSk7XG4gICAgICAgICAgICBpZiAoc3RvcmUgJiYgJ3Jlc2V0U2VsZWN0b3JzJyBpbiBzdG9yZSkge1xuICAgICAgICAgICAgICAgIHN0b3JlLnJlc2V0U2VsZWN0b3JzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICB9KSk7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2NrU3RvcmUgZXh0ZW5kcyBTdG9yZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBzdGF0ZSRcbiAgICAgKiBAcGFyYW0gez99IGFjdGlvbnNPYnNlcnZlclxuICAgICAqIEBwYXJhbSB7P30gcmVkdWNlck1hbmFnZXJcbiAgICAgKiBAcGFyYW0gez99IGluaXRpYWxTdGF0ZVxuICAgICAqIEBwYXJhbSB7Pz19IG1vY2tTZWxlY3RvcnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSQsIGFjdGlvbnNPYnNlcnZlciwgcmVkdWNlck1hbmFnZXIsIGluaXRpYWxTdGF0ZSwgbW9ja1NlbGVjdG9ycykge1xuICAgICAgICBzdXBlcihzdGF0ZSQsIGFjdGlvbnNPYnNlcnZlciwgcmVkdWNlck1hbmFnZXIpO1xuICAgICAgICB0aGlzLnN0YXRlJCA9IHN0YXRlJDtcbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgICAgIHRoaXMucmVzZXRTZWxlY3RvcnMoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmluaXRpYWxTdGF0ZSk7XG4gICAgICAgIHRoaXMuc2Nhbm5lZEFjdGlvbnMkID0gYWN0aW9uc09ic2VydmVyLmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICBpZiAobW9ja1NlbGVjdG9ycykge1xuICAgICAgICAgICAgbW9ja1NlbGVjdG9ycy5mb3JFYWNoKCgvKipcbiAgICAgICAgICAgICAqIEBwYXJhbSB7P30gbW9ja1NlbGVjdG9yXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtb2NrU2VsZWN0b3IgPT4ge1xuICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IG1vY2tTZWxlY3Rvci5zZWxlY3RvcjtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJyaWRlU2VsZWN0b3Ioc2VsZWN0b3IsIG1vY2tTZWxlY3Rvci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJyaWRlU2VsZWN0b3Ioc2VsZWN0b3IsIG1vY2tTZWxlY3Rvci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmV4dFN0YXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSQubmV4dChuZXh0U3RhdGUpO1xuICAgICAgICB0aGlzLmxhc3RTdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIFQsIFJlc3VsdFxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBvdmVycmlkZVNlbGVjdG9yKHNlbGVjdG9yLCB2YWx1ZSkge1xuICAgICAgICBNb2NrU3RvcmUuc2VsZWN0b3JzLnNldChzZWxlY3RvciwgdmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvcigoLyoqXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAoKSA9PiB7IH0pLCAoLyoqXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAoKSA9PiB2YWx1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1NlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHNlbGVjdG9yLnNldFJlc3VsdCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICByZXNldFNlbGVjdG9ycygpIHtcbiAgICAgICAgTW9ja1N0b3JlLnNlbGVjdG9ycy5mb3JFYWNoKCgvKipcbiAgICAgICAgICogQHBhcmFtIHs/fSBfXG4gICAgICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIChfLCBzZWxlY3RvcikgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rvci5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3Iuc2V0UmVzdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgTW9ja1N0b3JlLnNlbGVjdG9ycy5jbGVhcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHs/PX0gcHJvcFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgc2VsZWN0KHNlbGVjdG9yLCBwcm9wKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnICYmIE1vY2tTdG9yZS5zZWxlY3RvcnMuaGFzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCZWhhdmlvclN1YmplY3QoTW9ja1N0b3JlLnNlbGVjdG9ycy5nZXQoc2VsZWN0b3IpKS5hc09ic2VydmFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuc2VsZWN0KHNlbGVjdG9yLCBwcm9wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBhZGRSZWR1Y2VyKCkge1xuICAgICAgICAvKiBub29wICovXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgcmVtb3ZlUmVkdWNlcigpIHtcbiAgICAgICAgLyogbm9vcCAqL1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoZXMgdGhlIGV4aXN0aW5nIHN0YXRlLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgcmVmcmVzaFN0YXRlKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sICgoLyoqIEB0eXBlIHs/fSAqLyAodGhpcy5sYXN0U3RhdGUpKSkpKTtcbiAgICB9XG59XG5Nb2NrU3RvcmUuc2VsZWN0b3JzID0gbmV3IE1hcCgpO1xuTW9ja1N0b3JlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbk1vY2tTdG9yZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IE1vY2tTdGF0ZSB9LFxuICAgIHsgdHlwZTogQWN0aW9uc1N1YmplY3QgfSxcbiAgICB7IHR5cGU6IFJlZHVjZXJNYW5hZ2VyIH0sXG4gICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0lOSVRJQUxfU1RBVEUsXSB9XSB9LFxuICAgIHsgdHlwZTogQXJyYXksIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW01PQ0tfU0VMRUNUT1JTLF0gfV0gfVxuXTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBNb2NrU3RvcmUuc2VsZWN0b3JzO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBNb2NrU3RvcmUucHJvdG90eXBlLnNjYW5uZWRBY3Rpb25zJDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE1vY2tTdG9yZS5wcm90b3R5cGUubGFzdFN0YXRlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTW9ja1N0b3JlLnByb3RvdHlwZS5zdGF0ZSQ7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBNb2NrU3RvcmUucHJvdG90eXBlLmluaXRpYWxTdGF0ZTtcbn1cbiJdfQ==