/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ActionsSubject } from './actions_subject';
import { INITIAL_REDUCERS, INITIAL_STATE, REDUCER_FACTORY } from './tokens';
import { createFeatureReducerFactory, createReducerFactory, omit, } from './utils';
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
export class ReducerObservable extends Observable {
}
/**
 * @abstract
 */
export class ReducerManagerDispatcher extends ActionsSubject {
}
/** @type {?} */
export const UPDATE = (/** @type {?} */ ('@ngrx/store/update-reducers'));
export class ReducerManager extends BehaviorSubject {
    /**
     * @param {?} dispatcher
     * @param {?} initialState
     * @param {?} reducers
     * @param {?} reducerFactory
     */
    constructor(dispatcher, initialState, reducers, reducerFactory) {
        super(reducerFactory(reducers, initialState));
        this.dispatcher = dispatcher;
        this.initialState = initialState;
        this.reducers = reducers;
        this.reducerFactory = reducerFactory;
    }
    /**
     * @param {?} feature
     * @return {?}
     */
    addFeature(feature) {
        this.addFeatures([feature]);
    }
    /**
     * @param {?} features
     * @return {?}
     */
    addFeatures(features) {
        /** @type {?} */
        const reducers = features.reduce((/**
         * @param {?} reducerDict
         * @param {?} __1
         * @return {?}
         */
        (reducerDict, { reducers, reducerFactory, metaReducers, initialState, key }) => {
            /** @type {?} */
            const reducer = typeof reducers === 'function'
                ? createFeatureReducerFactory(metaReducers)(reducers, initialState)
                : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);
            reducerDict[key] = reducer;
            return reducerDict;
        }), (/** @type {?} */ ({})));
        this.addReducers(reducers);
    }
    /**
     * @param {?} feature
     * @return {?}
     */
    removeFeature(feature) {
        this.removeFeatures([feature]);
    }
    /**
     * @param {?} features
     * @return {?}
     */
    removeFeatures(features) {
        this.removeReducers(features.map((/**
         * @param {?} p
         * @return {?}
         */
        p => p.key)));
    }
    /**
     * @param {?} key
     * @param {?} reducer
     * @return {?}
     */
    addReducer(key, reducer) {
        this.addReducers({ [key]: reducer });
    }
    /**
     * @param {?} reducers
     * @return {?}
     */
    addReducers(reducers) {
        this.reducers = Object.assign({}, this.reducers, reducers);
        this.updateReducers(Object.keys(reducers));
    }
    /**
     * @param {?} featureKey
     * @return {?}
     */
    removeReducer(featureKey) {
        this.removeReducers([featureKey]);
    }
    /**
     * @param {?} featureKeys
     * @return {?}
     */
    removeReducers(featureKeys) {
        featureKeys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.reducers = (/** @type {?} */ (omit(this.reducers, key) /*TODO(#823)*/));
        }));
        this.updateReducers(featureKeys);
    }
    /**
     * @private
     * @param {?} featureKeys
     * @return {?}
     */
    updateReducers(featureKeys) {
        this.next(this.reducerFactory(this.reducers, this.initialState));
        this.dispatcher.next((/** @type {?} */ ({
            type: UPDATE,
            features: featureKeys,
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.complete();
    }
}
ReducerManager.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ReducerManager, factory: function ReducerManager_Factory(t) { return new (t || ReducerManager)(ɵngcc0.ɵɵinject(ReducerManagerDispatcher), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(INITIAL_REDUCERS), ɵngcc0.ɵɵinject(REDUCER_FACTORY)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ReducerManager, [{
        type: Injectable
    }], function () { return [{ type: ReducerManagerDispatcher }, { type: undefined, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [INITIAL_REDUCERS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [REDUCER_FACTORY]
            }] }]; }, { constructor: [], dispatcher: [], initialState: [], reducers: [], reducerFactory: [], addFeature: [], addFeatures: [], removeFeature: [], removeFeatures: [], addReducer: [], addReducers: [], removeReducer: [], removeReducers: [], updateReducers: [], ngOnDestroy: [] });
/** @nocollapse */
ReducerManager.ctorParameters = () => [
    { type: ReducerManagerDispatcher },
    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_REDUCERS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [REDUCER_FACTORY,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.dispatcher;
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.initialState;
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.reducers;
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.reducerFactory;
}
/** @type {?} */
export const REDUCER_MANAGER_PROVIDERS = [
    ReducerManager,
    { provide: ReducerObservable, useExisting: ReducerManager },
    { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtMjAxNS9zcmMvcmVkdWNlcl9tYW5hZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNEhDLG1TQUdDIiwiZmlsZSI6InJlZHVjZXJfbWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aW9uc1N1YmplY3QgfSBmcm9tICcuL2FjdGlvbnNfc3ViamVjdCc7XG5pbXBvcnQgeyBJTklUSUFMX1JFRFVDRVJTLCBJTklUSUFMX1NUQVRFLCBSRURVQ0VSX0ZBQ1RPUlkgfSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQgeyBjcmVhdGVGZWF0dXJlUmVkdWNlckZhY3RvcnksIGNyZWF0ZVJlZHVjZXJGYWN0b3J5LCBvbWl0LCB9IGZyb20gJy4vdXRpbHMnO1xuLyoqXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIFJlZHVjZXJPYnNlcnZhYmxlIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG59XG4vKipcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgY2xhc3MgUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyIGV4dGVuZHMgQWN0aW9uc1N1YmplY3Qge1xufVxuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IGNvbnN0IFVQREFURSA9ICgvKiogQHR5cGUgez99ICovICgnQG5ncngvc3RvcmUvdXBkYXRlLXJlZHVjZXJzJykpO1xuZXhwb3J0IGNsYXNzIFJlZHVjZXJNYW5hZ2VyIGV4dGVuZHMgQmVoYXZpb3JTdWJqZWN0IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGRpc3BhdGNoZXJcbiAgICAgKiBAcGFyYW0gez99IGluaXRpYWxTdGF0ZVxuICAgICAqIEBwYXJhbSB7P30gcmVkdWNlcnNcbiAgICAgKiBAcGFyYW0gez99IHJlZHVjZXJGYWN0b3J5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGlzcGF0Y2hlciwgaW5pdGlhbFN0YXRlLCByZWR1Y2VycywgcmVkdWNlckZhY3RvcnkpIHtcbiAgICAgICAgc3VwZXIocmVkdWNlckZhY3RvcnkocmVkdWNlcnMsIGluaXRpYWxTdGF0ZSkpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgICAgdGhpcy5yZWR1Y2VycyA9IHJlZHVjZXJzO1xuICAgICAgICB0aGlzLnJlZHVjZXJGYWN0b3J5ID0gcmVkdWNlckZhY3Rvcnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZmVhdHVyZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgYWRkRmVhdHVyZShmZWF0dXJlKSB7XG4gICAgICAgIHRoaXMuYWRkRmVhdHVyZXMoW2ZlYXR1cmVdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmZWF0dXJlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgYWRkRmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICBjb25zdCByZWR1Y2VycyA9IGZlYXR1cmVzLnJlZHVjZSgoLyoqXG4gICAgICAgICAqIEBwYXJhbSB7P30gcmVkdWNlckRpY3RcbiAgICAgICAgICogQHBhcmFtIHs/fSBfXzFcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIChyZWR1Y2VyRGljdCwgeyByZWR1Y2VycywgcmVkdWNlckZhY3RvcnksIG1ldGFSZWR1Y2VycywgaW5pdGlhbFN0YXRlLCBrZXkgfSkgPT4ge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgICAgY29uc3QgcmVkdWNlciA9IHR5cGVvZiByZWR1Y2VycyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gY3JlYXRlRmVhdHVyZVJlZHVjZXJGYWN0b3J5KG1ldGFSZWR1Y2VycykocmVkdWNlcnMsIGluaXRpYWxTdGF0ZSlcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVJlZHVjZXJGYWN0b3J5KHJlZHVjZXJGYWN0b3J5LCBtZXRhUmVkdWNlcnMpKHJlZHVjZXJzLCBpbml0aWFsU3RhdGUpO1xuICAgICAgICAgICAgcmVkdWNlckRpY3Rba2V5XSA9IHJlZHVjZXI7XG4gICAgICAgICAgICByZXR1cm4gcmVkdWNlckRpY3Q7XG4gICAgICAgIH0pLCAoLyoqIEB0eXBlIHs/fSAqLyAoe30pKSk7XG4gICAgICAgIHRoaXMuYWRkUmVkdWNlcnMocmVkdWNlcnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZlYXR1cmVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHJlbW92ZUZlYXR1cmUoZmVhdHVyZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUZlYXR1cmVzKFtmZWF0dXJlXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZmVhdHVyZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHJlbW92ZUZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUmVkdWNlcnMoZmVhdHVyZXMubWFwKCgvKipcbiAgICAgICAgICogQHBhcmFtIHs/fSBwXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBwID0+IHAua2V5KSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGtleVxuICAgICAqIEBwYXJhbSB7P30gcmVkdWNlclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgYWRkUmVkdWNlcihrZXksIHJlZHVjZXIpIHtcbiAgICAgICAgdGhpcy5hZGRSZWR1Y2Vycyh7IFtrZXldOiByZWR1Y2VyIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlZHVjZXJzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBhZGRSZWR1Y2VycyhyZWR1Y2Vycykge1xuICAgICAgICB0aGlzLnJlZHVjZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yZWR1Y2VycywgcmVkdWNlcnMpO1xuICAgICAgICB0aGlzLnVwZGF0ZVJlZHVjZXJzKE9iamVjdC5rZXlzKHJlZHVjZXJzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZmVhdHVyZUtleVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgcmVtb3ZlUmVkdWNlcihmZWF0dXJlS2V5KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUmVkdWNlcnMoW2ZlYXR1cmVLZXldKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmZWF0dXJlS2V5c1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgcmVtb3ZlUmVkdWNlcnMoZmVhdHVyZUtleXMpIHtcbiAgICAgICAgZmVhdHVyZUtleXMuZm9yRWFjaCgoLyoqXG4gICAgICAgICAqIEBwYXJhbSB7P30ga2V5XG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBrZXkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWR1Y2VycyA9ICgvKiogQHR5cGUgez99ICovIChvbWl0KHRoaXMucmVkdWNlcnMsIGtleSkgLypUT0RPKCM4MjMpKi8pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnVwZGF0ZVJlZHVjZXJzKGZlYXR1cmVLZXlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gez99IGZlYXR1cmVLZXlzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICB1cGRhdGVSZWR1Y2VycyhmZWF0dXJlS2V5cykge1xuICAgICAgICB0aGlzLm5leHQodGhpcy5yZWR1Y2VyRmFjdG9yeSh0aGlzLnJlZHVjZXJzLCB0aGlzLmluaXRpYWxTdGF0ZSkpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCgoLyoqIEB0eXBlIHs/fSAqLyAoe1xuICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVLZXlzLFxuICAgICAgICB9KSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuUmVkdWNlck1hbmFnZXIuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuUmVkdWNlck1hbmFnZXIuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIgfSxcbiAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbSU5JVElBTF9TVEFURSxdIH1dIH0sXG4gICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0lOSVRJQUxfUkVEVUNFUlMsXSB9XSB9LFxuICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtSRURVQ0VSX0ZBQ1RPUlksXSB9XSB9XG5dO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUuZGlzcGF0Y2hlcjtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFJlZHVjZXJNYW5hZ2VyLnByb3RvdHlwZS5pbml0aWFsU3RhdGU7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUucmVkdWNlcnM7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUucmVkdWNlckZhY3Rvcnk7XG59XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgY29uc3QgUkVEVUNFUl9NQU5BR0VSX1BST1ZJREVSUyA9IFtcbiAgICBSZWR1Y2VyTWFuYWdlcixcbiAgICB7IHByb3ZpZGU6IFJlZHVjZXJPYnNlcnZhYmxlLCB1c2VFeGlzdGluZzogUmVkdWNlck1hbmFnZXIgfSxcbiAgICB7IHByb3ZpZGU6IFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlciwgdXNlRXhpc3Rpbmc6IEFjdGlvbnNTdWJqZWN0IH0sXG5dO1xuIl19