import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ActionsSubject } from './actions_subject';
import { INITIAL_REDUCERS, INITIAL_STATE, REDUCER_FACTORY } from './tokens';
import { createFeatureReducerFactory, createReducerFactory, omit, } from './utils';
import * as ɵngcc0 from '@angular/core';
var ReducerObservable = /** @class */ (function (_super) {
    tslib_1.__extends(ReducerObservable, _super);
    function ReducerObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReducerObservable;
}(Observable));
export { ReducerObservable };
var ReducerManagerDispatcher = /** @class */ (function (_super) {
    tslib_1.__extends(ReducerManagerDispatcher, _super);
    function ReducerManagerDispatcher() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReducerManagerDispatcher;
}(ActionsSubject));
export { ReducerManagerDispatcher };
export var UPDATE = '@ngrx/store/update-reducers';
var ReducerManager = /** @class */ (function (_super) {
    tslib_1.__extends(ReducerManager, _super);
    function ReducerManager(dispatcher, initialState, reducers, reducerFactory) {
        var _this = _super.call(this, reducerFactory(reducers, initialState)) || this;
        _this.dispatcher = dispatcher;
        _this.initialState = initialState;
        _this.reducers = reducers;
        _this.reducerFactory = reducerFactory;
        return _this;
    }
    ReducerManager.prototype.addFeature = function (feature) {
        this.addFeatures([feature]);
    };
    ReducerManager.prototype.addFeatures = function (features) {
        var reducers = features.reduce(function (reducerDict, _a) {
            var reducers = _a.reducers, reducerFactory = _a.reducerFactory, metaReducers = _a.metaReducers, initialState = _a.initialState, key = _a.key;
            var reducer = typeof reducers === 'function'
                ? createFeatureReducerFactory(metaReducers)(reducers, initialState)
                : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);
            reducerDict[key] = reducer;
            return reducerDict;
        }, {});
        this.addReducers(reducers);
    };
    ReducerManager.prototype.removeFeature = function (feature) {
        this.removeFeatures([feature]);
    };
    ReducerManager.prototype.removeFeatures = function (features) {
        this.removeReducers(features.map(function (p) { return p.key; }));
    };
    ReducerManager.prototype.addReducer = function (key, reducer) {
        var _a;
        this.addReducers((_a = {}, _a[key] = reducer, _a));
    };
    ReducerManager.prototype.addReducers = function (reducers) {
        this.reducers = tslib_1.__assign({}, this.reducers, reducers);
        this.updateReducers(Object.keys(reducers));
    };
    ReducerManager.prototype.removeReducer = function (featureKey) {
        this.removeReducers([featureKey]);
    };
    ReducerManager.prototype.removeReducers = function (featureKeys) {
        var _this = this;
        featureKeys.forEach(function (key) {
            _this.reducers = omit(_this.reducers, key) /*TODO(#823)*/;
        });
        this.updateReducers(featureKeys);
    };
    ReducerManager.prototype.updateReducers = function (featureKeys) {
        this.next(this.reducerFactory(this.reducers, this.initialState));
        this.dispatcher.next({
            type: UPDATE,
            features: featureKeys,
        });
    };
    ReducerManager.prototype.ngOnDestroy = function () {
        this.complete();
    };
    ReducerManager = tslib_1.__decorate([
        tslib_1.__param(1, Inject(INITIAL_STATE)),
        tslib_1.__param(2, Inject(INITIAL_REDUCERS)),
        tslib_1.__param(3, Inject(REDUCER_FACTORY)),
        tslib_1.__metadata("design:paramtypes", [ReducerManagerDispatcher, Object, Object, Function])
    ], ReducerManager);
ReducerManager.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ReducerManager, factory: function ReducerManager_Factory(t) { return new (t || ReducerManager)(ɵngcc0.ɵɵinject(ReducerManagerDispatcher), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(INITIAL_REDUCERS), ɵngcc0.ɵɵinject(REDUCER_FACTORY)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ReducerManager, [{
        type: Injectable
    }], function () { return [{ type: ReducerManagerDispatcher }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_REDUCERS]
            }] }, { type: Function, decorators: [{
                type: Inject,
                args: [REDUCER_FACTORY]
            }] }]; }, { addFeature: [], addFeatures: [], removeFeature: [], removeFeatures: [], addReducer: [], addReducers: [], reducers: [], removeReducer: [], removeReducers: [], updateReducers: [], ngOnDestroy: [] });
    return ReducerManager;
}(BehaviorSubject));
export { ReducerManager };
export var REDUCER_MANAGER_PROVIDERS = [
    ReducerManager,
    { provide: ReducerObservable, useExisting: ReducerManager },
    { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtNS9zcmMvcmVkdWNlcl9tYW5hZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0EyRXlDLEFBQ3BCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Nk5BS0UiLCJmaWxlIjoicmVkdWNlcl9tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCB9IGZyb20gJy4vYWN0aW9uc19zdWJqZWN0JztcbmltcG9ydCB7IElOSVRJQUxfUkVEVUNFUlMsIElOSVRJQUxfU1RBVEUsIFJFRFVDRVJfRkFDVE9SWSB9IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCB7IGNyZWF0ZUZlYXR1cmVSZWR1Y2VyRmFjdG9yeSwgY3JlYXRlUmVkdWNlckZhY3RvcnksIG9taXQsIH0gZnJvbSAnLi91dGlscyc7XG52YXIgUmVkdWNlck9ic2VydmFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmVkdWNlck9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVkdWNlck9ic2VydmFibGUoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFJlZHVjZXJPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBSZWR1Y2VyT2JzZXJ2YWJsZSB9O1xudmFyIFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXI7XG59KEFjdGlvbnNTdWJqZWN0KSk7XG5leHBvcnQgeyBSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIgfTtcbmV4cG9ydCB2YXIgVVBEQVRFID0gJ0BuZ3J4L3N0b3JlL3VwZGF0ZS1yZWR1Y2Vycyc7XG52YXIgUmVkdWNlck1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmVkdWNlck1hbmFnZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVkdWNlck1hbmFnZXIoZGlzcGF0Y2hlciwgaW5pdGlhbFN0YXRlLCByZWR1Y2VycywgcmVkdWNlckZhY3RvcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcmVkdWNlckZhY3RvcnkocmVkdWNlcnMsIGluaXRpYWxTdGF0ZSkpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuICAgICAgICBfdGhpcy5pbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgICAgIF90aGlzLnJlZHVjZXJzID0gcmVkdWNlcnM7XG4gICAgICAgIF90aGlzLnJlZHVjZXJGYWN0b3J5ID0gcmVkdWNlckZhY3Rvcnk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLmFkZEZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICB0aGlzLmFkZEZlYXR1cmVzKFtmZWF0dXJlXSk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUuYWRkRmVhdHVyZXMgPSBmdW5jdGlvbiAoZmVhdHVyZXMpIHtcbiAgICAgICAgdmFyIHJlZHVjZXJzID0gZmVhdHVyZXMucmVkdWNlKGZ1bmN0aW9uIChyZWR1Y2VyRGljdCwgX2EpIHtcbiAgICAgICAgICAgIHZhciByZWR1Y2VycyA9IF9hLnJlZHVjZXJzLCByZWR1Y2VyRmFjdG9yeSA9IF9hLnJlZHVjZXJGYWN0b3J5LCBtZXRhUmVkdWNlcnMgPSBfYS5tZXRhUmVkdWNlcnMsIGluaXRpYWxTdGF0ZSA9IF9hLmluaXRpYWxTdGF0ZSwga2V5ID0gX2Eua2V5O1xuICAgICAgICAgICAgdmFyIHJlZHVjZXIgPSB0eXBlb2YgcmVkdWNlcnMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUZlYXR1cmVSZWR1Y2VyRmFjdG9yeShtZXRhUmVkdWNlcnMpKHJlZHVjZXJzLCBpbml0aWFsU3RhdGUpXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVSZWR1Y2VyRmFjdG9yeShyZWR1Y2VyRmFjdG9yeSwgbWV0YVJlZHVjZXJzKShyZWR1Y2VycywgaW5pdGlhbFN0YXRlKTtcbiAgICAgICAgICAgIHJlZHVjZXJEaWN0W2tleV0gPSByZWR1Y2VyO1xuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXJEaWN0O1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIHRoaXMuYWRkUmVkdWNlcnMocmVkdWNlcnMpO1xuICAgIH07XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLnJlbW92ZUZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUZlYXR1cmVzKFtmZWF0dXJlXSk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUucmVtb3ZlRmVhdHVyZXMgPSBmdW5jdGlvbiAoZmVhdHVyZXMpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVSZWR1Y2VycyhmZWF0dXJlcy5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAua2V5OyB9KSk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUuYWRkUmVkdWNlciA9IGZ1bmN0aW9uIChrZXksIHJlZHVjZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmFkZFJlZHVjZXJzKChfYSA9IHt9LCBfYVtrZXldID0gcmVkdWNlciwgX2EpKTtcbiAgICB9O1xuICAgIFJlZHVjZXJNYW5hZ2VyLnByb3RvdHlwZS5hZGRSZWR1Y2VycyA9IGZ1bmN0aW9uIChyZWR1Y2Vycykge1xuICAgICAgICB0aGlzLnJlZHVjZXJzID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5yZWR1Y2VycywgcmVkdWNlcnMpO1xuICAgICAgICB0aGlzLnVwZGF0ZVJlZHVjZXJzKE9iamVjdC5rZXlzKHJlZHVjZXJzKSk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUucmVtb3ZlUmVkdWNlciA9IGZ1bmN0aW9uIChmZWF0dXJlS2V5KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUmVkdWNlcnMoW2ZlYXR1cmVLZXldKTtcbiAgICB9O1xuICAgIFJlZHVjZXJNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVSZWR1Y2VycyA9IGZ1bmN0aW9uIChmZWF0dXJlS2V5cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBmZWF0dXJlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLnJlZHVjZXJzID0gb21pdChfdGhpcy5yZWR1Y2Vycywga2V5KSAvKlRPRE8oIzgyMykqLztcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlUmVkdWNlcnMoZmVhdHVyZUtleXMpO1xuICAgIH07XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVJlZHVjZXJzID0gZnVuY3Rpb24gKGZlYXR1cmVLZXlzKSB7XG4gICAgICAgIHRoaXMubmV4dCh0aGlzLnJlZHVjZXJGYWN0b3J5KHRoaXMucmVkdWNlcnMsIHRoaXMuaW5pdGlhbFN0YXRlKSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5uZXh0KHtcbiAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlS2V5cyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFJlZHVjZXJNYW5hZ2VyID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMSwgSW5qZWN0KElOSVRJQUxfU1RBVEUpKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDIsIEluamVjdChJTklUSUFMX1JFRFVDRVJTKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgzLCBJbmplY3QoUkVEVUNFUl9GQUNUT1JZKSksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIsIE9iamVjdCwgT2JqZWN0LCBGdW5jdGlvbl0pXG4gICAgXSwgUmVkdWNlck1hbmFnZXIpO1xuICAgIHJldHVybiBSZWR1Y2VyTWFuYWdlcjtcbn0oQmVoYXZpb3JTdWJqZWN0KSk7XG5leHBvcnQgeyBSZWR1Y2VyTWFuYWdlciB9O1xuZXhwb3J0IHZhciBSRURVQ0VSX01BTkFHRVJfUFJPVklERVJTID0gW1xuICAgIFJlZHVjZXJNYW5hZ2VyLFxuICAgIHsgcHJvdmlkZTogUmVkdWNlck9ic2VydmFibGUsIHVzZUV4aXN0aW5nOiBSZWR1Y2VyTWFuYWdlciB9LFxuICAgIHsgcHJvdmlkZTogUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyLCB1c2VFeGlzdGluZzogQWN0aW9uc1N1YmplY3QgfSxcbl07XG4iXX0=