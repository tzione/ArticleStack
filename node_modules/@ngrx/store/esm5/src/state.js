import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Observable, queueScheduler, } from 'rxjs';
import { observeOn, scan, withLatestFrom } from 'rxjs/operators';
import { ActionsSubject, INIT } from './actions_subject';
import { ReducerObservable } from './reducer_manager';
import { ScannedActionsSubject } from './scanned_actions_subject';
import { INITIAL_STATE } from './tokens';
import * as ɵngcc0 from '@angular/core';
var StateObservable = /** @class */ (function (_super) {
    tslib_1.__extends(StateObservable, _super);
    function StateObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StateObservable;
}(Observable));
export { StateObservable };
var State = /** @class */ (function (_super) {
    tslib_1.__extends(State, _super);
    function State(actions$, reducer$, scannedActions, initialState) {
        var _this = _super.call(this, initialState) || this;
        var actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));
        var withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));
        var seed = { state: initialState };
        var stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));
        _this.stateSubscription = stateAndAction$.subscribe(function (_a) {
            var state = _a.state, action = _a.action;
            _this.next(state);
            scannedActions.next(action);
        });
        return _this;
    }
    State.prototype.ngOnDestroy = function () {
        this.stateSubscription.unsubscribe();
        this.complete();
    };
    State.INIT = INIT;
    State = tslib_1.__decorate([
        tslib_1.__param(3, Inject(INITIAL_STATE)),
        tslib_1.__metadata("design:paramtypes", [ActionsSubject,
            ReducerObservable,
            ScannedActionsSubject, Object])
    ], State);
State.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: State, factory: function State_Factory(t) { return new (t || State)(ɵngcc0.ɵɵinject(ActionsSubject), ɵngcc0.ɵɵinject(ReducerObservable), ɵngcc0.ɵɵinject(ScannedActionsSubject), ɵngcc0.ɵɵinject(INITIAL_STATE)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(State, [{
        type: Injectable
    }], function () { return [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }]; }, { ngOnDestroy: [] });
    return State;
}(BehaviorSubject));
export { State };
export function reduceState(stateActionPair, _a) {
    if (stateActionPair === void 0) { stateActionPair = { state: undefined }; }
    var _b = tslib_1.__read(_a, 2), action = _b[0], reducer = _b[1];
    var state = stateActionPair.state;
    return { state: reducer(state, action), action: action };
}
export var STATE_PROVIDERS = [
    State,
    { provide: StateObservable, useExisting: State },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtNS9zcmMvc3RhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQTRCZ0MsQUFDWDs7Ozs7Ozs7Ozs7OzJDQUtQIiwiZmlsZSI6InN0YXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBxdWV1ZVNjaGVkdWxlciwgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG9ic2VydmVPbiwgc2Nhbiwgd2l0aExhdGVzdEZyb20gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCwgSU5JVCB9IGZyb20gJy4vYWN0aW9uc19zdWJqZWN0JztcbmltcG9ydCB7IFJlZHVjZXJPYnNlcnZhYmxlIH0gZnJvbSAnLi9yZWR1Y2VyX21hbmFnZXInO1xuaW1wb3J0IHsgU2Nhbm5lZEFjdGlvbnNTdWJqZWN0IH0gZnJvbSAnLi9zY2FubmVkX2FjdGlvbnNfc3ViamVjdCc7XG5pbXBvcnQgeyBJTklUSUFMX1NUQVRFIH0gZnJvbSAnLi90b2tlbnMnO1xudmFyIFN0YXRlT2JzZXJ2YWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdGF0ZU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3RhdGVPYnNlcnZhYmxlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBTdGF0ZU9ic2VydmFibGU7XG59KE9ic2VydmFibGUpKTtcbmV4cG9ydCB7IFN0YXRlT2JzZXJ2YWJsZSB9O1xudmFyIFN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN0YXRlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0YXRlKGFjdGlvbnMkLCByZWR1Y2VyJCwgc2Nhbm5lZEFjdGlvbnMsIGluaXRpYWxTdGF0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBpbml0aWFsU3RhdGUpIHx8IHRoaXM7XG4gICAgICAgIHZhciBhY3Rpb25zT25RdWV1ZSQgPSBhY3Rpb25zJC5waXBlKG9ic2VydmVPbihxdWV1ZVNjaGVkdWxlcikpO1xuICAgICAgICB2YXIgd2l0aExhdGVzdFJlZHVjZXIkID0gYWN0aW9uc09uUXVldWUkLnBpcGUod2l0aExhdGVzdEZyb20ocmVkdWNlciQpKTtcbiAgICAgICAgdmFyIHNlZWQgPSB7IHN0YXRlOiBpbml0aWFsU3RhdGUgfTtcbiAgICAgICAgdmFyIHN0YXRlQW5kQWN0aW9uJCA9IHdpdGhMYXRlc3RSZWR1Y2VyJC5waXBlKHNjYW4ocmVkdWNlU3RhdGUsIHNlZWQpKTtcbiAgICAgICAgX3RoaXMuc3RhdGVTdWJzY3JpcHRpb24gPSBzdGF0ZUFuZEFjdGlvbiQuc3Vic2NyaWJlKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gX2Euc3RhdGUsIGFjdGlvbiA9IF9hLmFjdGlvbjtcbiAgICAgICAgICAgIF90aGlzLm5leHQoc3RhdGUpO1xuICAgICAgICAgICAgc2Nhbm5lZEFjdGlvbnMubmV4dChhY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdGF0ZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgU3RhdGUuSU5JVCA9IElOSVQ7XG4gICAgU3RhdGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgzLCBJbmplY3QoSU5JVElBTF9TVEFURSkpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbQWN0aW9uc1N1YmplY3QsXG4gICAgICAgICAgICBSZWR1Y2VyT2JzZXJ2YWJsZSxcbiAgICAgICAgICAgIFNjYW5uZWRBY3Rpb25zU3ViamVjdCwgT2JqZWN0XSlcbiAgICBdLCBTdGF0ZSk7XG4gICAgcmV0dXJuIFN0YXRlO1xufShCZWhhdmlvclN1YmplY3QpKTtcbmV4cG9ydCB7IFN0YXRlIH07XG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlU3RhdGUoc3RhdGVBY3Rpb25QYWlyLCBfYSkge1xuICAgIGlmIChzdGF0ZUFjdGlvblBhaXIgPT09IHZvaWQgMCkgeyBzdGF0ZUFjdGlvblBhaXIgPSB7IHN0YXRlOiB1bmRlZmluZWQgfTsgfVxuICAgIHZhciBfYiA9IHRzbGliXzEuX19yZWFkKF9hLCAyKSwgYWN0aW9uID0gX2JbMF0sIHJlZHVjZXIgPSBfYlsxXTtcbiAgICB2YXIgc3RhdGUgPSBzdGF0ZUFjdGlvblBhaXIuc3RhdGU7XG4gICAgcmV0dXJuIHsgc3RhdGU6IHJlZHVjZXIoc3RhdGUsIGFjdGlvbiksIGFjdGlvbjogYWN0aW9uIH07XG59XG5leHBvcnQgdmFyIFNUQVRFX1BST1ZJREVSUyA9IFtcbiAgICBTdGF0ZSxcbiAgICB7IHByb3ZpZGU6IFN0YXRlT2JzZXJ2YWJsZSwgdXNlRXhpc3Rpbmc6IFN0YXRlIH0sXG5dO1xuIl19