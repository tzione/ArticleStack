import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { BehaviorSubject } from 'rxjs';
import { ActionsSubject, INITIAL_STATE, ReducerManager, Store, createSelector, } from '@ngrx/store';
import { MockState } from './mock_state';
import { MOCK_SELECTORS } from './tokens';
import * as ɵngcc0 from '@angular/core';
if (typeof afterEach === 'function') {
    afterEach(function () {
        try {
            var store = TestBed.get(Store);
            if (store && 'resetSelectors' in store) {
                store.resetSelectors();
            }
        }
        catch (_a) { }
    });
}
var MockStore = /** @class */ (function (_super) {
    tslib_1.__extends(MockStore, _super);
    function MockStore(state$, actionsObserver, reducerManager, initialState, mockSelectors) {
        var _this = _super.call(this, state$, actionsObserver, reducerManager) || this;
        _this.state$ = state$;
        _this.initialState = initialState;
        _this.resetSelectors();
        _this.setState(_this.initialState);
        _this.scannedActions$ = actionsObserver.asObservable();
        if (mockSelectors) {
            mockSelectors.forEach(function (mockSelector) {
                var selector = mockSelector.selector;
                if (typeof selector === 'string') {
                    _this.overrideSelector(selector, mockSelector.value);
                }
                else {
                    _this.overrideSelector(selector, mockSelector.value);
                }
            });
        }
        return _this;
    }
    MockStore_1 = MockStore;
    MockStore.prototype.setState = function (nextState) {
        this.state$.next(nextState);
        this.lastState = nextState;
    };
    MockStore.prototype.overrideSelector = function (selector, value) {
        MockStore_1.selectors.set(selector, value);
        if (typeof selector === 'string') {
            var stringSelector = createSelector(function () { }, function () { return value; });
            return stringSelector;
        }
        selector.setResult(value);
        return selector;
    };
    MockStore.prototype.resetSelectors = function () {
        MockStore_1.selectors.forEach(function (_, selector) {
            if (typeof selector !== 'string') {
                selector.release();
                selector.setResult();
            }
        });
        MockStore_1.selectors.clear();
    };
    MockStore.prototype.select = function (selector, prop) {
        if (typeof selector === 'string' && MockStore_1.selectors.has(selector)) {
            return new BehaviorSubject(MockStore_1.selectors.get(selector)).asObservable();
        }
        return _super.prototype.select.call(this, selector, prop);
    };
    MockStore.prototype.addReducer = function () {
        /* noop */
    };
    MockStore.prototype.removeReducer = function () {
        /* noop */
    };
    /**
     * Refreshes the existing state.
     */
    MockStore.prototype.refreshState = function () {
        this.setState(tslib_1.__assign({}, this.lastState));
    };
    var MockStore_1;
    MockStore.selectors = new Map();
    MockStore = MockStore_1 = tslib_1.__decorate([
        tslib_1.__param(3, Inject(INITIAL_STATE)),
        tslib_1.__param(4, Inject(MOCK_SELECTORS)),
        tslib_1.__metadata("design:paramtypes", [MockState,
            ActionsSubject,
            ReducerManager, Object, Array])
    ], MockStore);
MockStore.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: MockStore, factory: function MockStore_Factory(t) { return new (t || MockStore)(ɵngcc0.ɵɵinject(MockState), ɵngcc0.ɵɵinject(ActionsSubject), ɵngcc0.ɵɵinject(ReducerManager), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(MOCK_SELECTORS)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MockStore, [{
        type: Injectable
    }], function () { return [{ type: MockState }, { type: ActionsSubject }, { type: ReducerManager }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: Array, decorators: [{
                type: Inject,
                args: [MOCK_SELECTORS]
            }] }]; }, { setState: [], lastState: [], overrideSelector: [], resetSelectors: [], select: [], addReducer: [], removeReducer: [], refreshState: [] });
    return MockStore;
}(Store));
export { MockStore };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3R6aW9uL09uZURyaXZlL9ee16HXnteb15nXnS9Qcml2YXRlL0FydGljbGVTdGFjay1tYXN0ZXIvQXJ0aWNsZVN0YWNrLW1hc3Rlci9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtNS90ZXN0aW5nL3NyYy9tb2NrX3N0b3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tEQTRFa0QsQUFDN0I7Ozs7Ozs7Ozs7Ozs7Ozs7a0tBTUgiLCJmaWxlIjoibW9ja19zdG9yZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCwgSU5JVElBTF9TVEFURSwgUmVkdWNlck1hbmFnZXIsIFN0b3JlLCBjcmVhdGVTZWxlY3RvciwgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBNb2NrU3RhdGUgfSBmcm9tICcuL21vY2tfc3RhdGUnO1xuaW1wb3J0IHsgTU9DS19TRUxFQ1RPUlMgfSBmcm9tICcuL3Rva2Vucyc7XG5pZiAodHlwZW9mIGFmdGVyRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFmdGVyRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgc3RvcmUgPSBUZXN0QmVkLmdldChTdG9yZSk7XG4gICAgICAgICAgICBpZiAoc3RvcmUgJiYgJ3Jlc2V0U2VsZWN0b3JzJyBpbiBzdG9yZSkge1xuICAgICAgICAgICAgICAgIHN0b3JlLnJlc2V0U2VsZWN0b3JzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICB9KTtcbn1cbnZhciBNb2NrU3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTW9ja1N0b3JlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1vY2tTdG9yZShzdGF0ZSQsIGFjdGlvbnNPYnNlcnZlciwgcmVkdWNlck1hbmFnZXIsIGluaXRpYWxTdGF0ZSwgbW9ja1NlbGVjdG9ycykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzdGF0ZSQsIGFjdGlvbnNPYnNlcnZlciwgcmVkdWNlck1hbmFnZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN0YXRlJCA9IHN0YXRlJDtcbiAgICAgICAgX3RoaXMuaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgICBfdGhpcy5yZXNldFNlbGVjdG9ycygpO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShfdGhpcy5pbml0aWFsU3RhdGUpO1xuICAgICAgICBfdGhpcy5zY2FubmVkQWN0aW9ucyQgPSBhY3Rpb25zT2JzZXJ2ZXIuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIGlmIChtb2NrU2VsZWN0b3JzKSB7XG4gICAgICAgICAgICBtb2NrU2VsZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKG1vY2tTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IG1vY2tTZWxlY3Rvci5zZWxlY3RvcjtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdmVycmlkZVNlbGVjdG9yKHNlbGVjdG9yLCBtb2NrU2VsZWN0b3IudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3ZlcnJpZGVTZWxlY3RvcihzZWxlY3RvciwgbW9ja1NlbGVjdG9yLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1vY2tTdG9yZV8xID0gTW9ja1N0b3JlO1xuICAgIE1vY2tTdG9yZS5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAobmV4dFN0YXRlKSB7XG4gICAgICAgIHRoaXMuc3RhdGUkLm5leHQobmV4dFN0YXRlKTtcbiAgICAgICAgdGhpcy5sYXN0U3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgfTtcbiAgICBNb2NrU3RvcmUucHJvdG90eXBlLm92ZXJyaWRlU2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhbHVlKSB7XG4gICAgICAgIE1vY2tTdG9yZV8xLnNlbGVjdG9ycy5zZXQoc2VsZWN0b3IsIHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmdTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yKGZ1bmN0aW9uICgpIHsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWU7IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1NlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHNlbGVjdG9yLnNldFJlc3VsdCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9O1xuICAgIE1vY2tTdG9yZS5wcm90b3R5cGUucmVzZXRTZWxlY3RvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE1vY2tTdG9yZV8xLnNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChfLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rvci5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3Iuc2V0UmVzdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBNb2NrU3RvcmVfMS5zZWxlY3RvcnMuY2xlYXIoKTtcbiAgICB9O1xuICAgIE1vY2tTdG9yZS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBwcm9wKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnICYmIE1vY2tTdG9yZV8xLnNlbGVjdG9ycy5oYXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJlaGF2aW9yU3ViamVjdChNb2NrU3RvcmVfMS5zZWxlY3RvcnMuZ2V0KHNlbGVjdG9yKSkuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2VsZWN0LmNhbGwodGhpcywgc2VsZWN0b3IsIHByb3ApO1xuICAgIH07XG4gICAgTW9ja1N0b3JlLnByb3RvdHlwZS5hZGRSZWR1Y2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiBub29wICovXG4gICAgfTtcbiAgICBNb2NrU3RvcmUucHJvdG90eXBlLnJlbW92ZVJlZHVjZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qIG5vb3AgKi9cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZnJlc2hlcyB0aGUgZXhpc3Rpbmcgc3RhdGUuXG4gICAgICovXG4gICAgTW9ja1N0b3JlLnByb3RvdHlwZS5yZWZyZXNoU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5sYXN0U3RhdGUpKTtcbiAgICB9O1xuICAgIHZhciBNb2NrU3RvcmVfMTtcbiAgICBNb2NrU3RvcmUuc2VsZWN0b3JzID0gbmV3IE1hcCgpO1xuICAgIE1vY2tTdG9yZSA9IE1vY2tTdG9yZV8xID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMywgSW5qZWN0KElOSVRJQUxfU1RBVEUpKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDQsIEluamVjdChNT0NLX1NFTEVDVE9SUykpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbTW9ja1N0YXRlLFxuICAgICAgICAgICAgQWN0aW9uc1N1YmplY3QsXG4gICAgICAgICAgICBSZWR1Y2VyTWFuYWdlciwgT2JqZWN0LCBBcnJheV0pXG4gICAgXSwgTW9ja1N0b3JlKTtcbiAgICByZXR1cm4gTW9ja1N0b3JlO1xufShTdG9yZSkpO1xuZXhwb3J0IHsgTW9ja1N0b3JlIH07XG4iXX0=