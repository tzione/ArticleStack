{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@ngrx/store/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;4BAK4B,AACP;;;;;;0CAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAkFwB,AACrB;;;;;;;;;;;;;;;;kKAMH;;;;;;;;;qCASmB,AAChB;;;;;;0CAEM","file":"testing.js","sourcesContent":["/**\n * @license NgRx 8.5.1\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { __extends, __decorate, __metadata, __assign, __param } from 'tslib';\nimport { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Store, createSelector, INITIAL_STATE, ActionsSubject, ReducerManager, StateObservable } from '@ngrx/store';\nimport { TestBed } from '@angular/core/testing';\n\nvar MockState = /** @class */ (function (_super) {\n    __extends(MockState, _super);\n    function MockState() {\n        return _super.call(this, {}) || this;\n    }\n    MockState = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [])\n    ], MockState);\n    return MockState;\n}(BehaviorSubject));\n\nvar MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n\nif (typeof afterEach === 'function') {\n    afterEach(function () {\n        try {\n            var store = TestBed.get(Store);\n            if (store && 'resetSelectors' in store) {\n                store.resetSelectors();\n            }\n        }\n        catch (_a) { }\n    });\n}\nvar MockStore = /** @class */ (function (_super) {\n    __extends(MockStore, _super);\n    function MockStore(state$, actionsObserver, reducerManager, initialState, mockSelectors) {\n        var _this = _super.call(this, state$, actionsObserver, reducerManager) || this;\n        _this.state$ = state$;\n        _this.initialState = initialState;\n        _this.resetSelectors();\n        _this.setState(_this.initialState);\n        _this.scannedActions$ = actionsObserver.asObservable();\n        if (mockSelectors) {\n            mockSelectors.forEach(function (mockSelector) {\n                var selector = mockSelector.selector;\n                if (typeof selector === 'string') {\n                    _this.overrideSelector(selector, mockSelector.value);\n                }\n                else {\n                    _this.overrideSelector(selector, mockSelector.value);\n                }\n            });\n        }\n        return _this;\n    }\n    MockStore_1 = MockStore;\n    MockStore.prototype.setState = function (nextState) {\n        this.state$.next(nextState);\n        this.lastState = nextState;\n    };\n    MockStore.prototype.overrideSelector = function (selector, value) {\n        MockStore_1.selectors.set(selector, value);\n        if (typeof selector === 'string') {\n            var stringSelector = createSelector(function () { }, function () { return value; });\n            return stringSelector;\n        }\n        selector.setResult(value);\n        return selector;\n    };\n    MockStore.prototype.resetSelectors = function () {\n        MockStore_1.selectors.forEach(function (_, selector) {\n            if (typeof selector !== 'string') {\n                selector.release();\n                selector.setResult();\n            }\n        });\n        MockStore_1.selectors.clear();\n    };\n    MockStore.prototype.select = function (selector, prop) {\n        if (typeof selector === 'string' && MockStore_1.selectors.has(selector)) {\n            return new BehaviorSubject(MockStore_1.selectors.get(selector)).asObservable();\n        }\n        return _super.prototype.select.call(this, selector, prop);\n    };\n    MockStore.prototype.addReducer = function () {\n        /* noop */\n    };\n    MockStore.prototype.removeReducer = function () {\n        /* noop */\n    };\n    /**\n     * Refreshes the existing state.\n     */\n    MockStore.prototype.refreshState = function () {\n        this.setState(__assign({}, this.lastState));\n    };\n    var MockStore_1;\n    MockStore.selectors = new Map();\n    MockStore = MockStore_1 = __decorate([\n        Injectable(),\n        __param(3, Inject(INITIAL_STATE)),\n        __param(4, Inject(MOCK_SELECTORS)),\n        __metadata(\"design:paramtypes\", [MockState,\n            ActionsSubject,\n            ReducerManager, Object, Array])\n    ], MockStore);\n    return MockStore;\n}(Store));\n\nvar MockReducerManager = /** @class */ (function (_super) {\n    __extends(MockReducerManager, _super);\n    function MockReducerManager() {\n        return _super.call(this, function () { return undefined; }) || this;\n    }\n    MockReducerManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [])\n    ], MockReducerManager);\n    return MockReducerManager;\n}(BehaviorSubject));\n\nfunction provideMockStore(config) {\n    if (config === void 0) { config = {}; }\n    return [\n        ActionsSubject,\n        MockState,\n        { provide: INITIAL_STATE, useValue: config.initialState || {} },\n        { provide: MOCK_SELECTORS, useValue: config.selectors },\n        { provide: StateObservable, useClass: MockState },\n        { provide: ReducerManager, useClass: MockReducerManager },\n        { provide: Store, useClass: MockStore },\n    ];\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_SELECTORS as ɵngrx_modules_store_testing_testing_a, provideMockStore, MockReducerManager, MockState, MockStore };\n"]}