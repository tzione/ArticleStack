{"version":3,"file":"mock_store.d.ts","sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@ngrx/store/testing/src/mock_store.d.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { Action, ActionsSubject, ReducerManager, Store, MemoizedSelectorWithProps, MemoizedSelector } from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nexport declare class MockStore<T> extends Store<T> {\n    private state$;\n    private initialState;\n    static selectors: Map<string | MemoizedSelector<any, any, import(\"@ngrx/store\").DefaultProjectorFn<any>> | MemoizedSelectorWithProps<any, any, any, import(\"@ngrx/store\").DefaultProjectorFn<any>>, any>;\n    scannedActions$: Observable<Action>;\n    private lastState;\n    constructor(state$: MockState<T>, actionsObserver: ActionsSubject, reducerManager: ReducerManager, initialState: T, mockSelectors?: MockSelector[]);\n    setState(nextState: T): void;\n    overrideSelector<T, Result>(selector: string, value: Result): MemoizedSelector<string, Result>;\n    overrideSelector<T, Result>(selector: MemoizedSelector<T, Result>, value: Result): MemoizedSelector<T, Result>;\n    overrideSelector<T, Result>(selector: MemoizedSelectorWithProps<T, any, Result>, value: Result): MemoizedSelectorWithProps<T, any, Result>;\n    resetSelectors(): void;\n    select(selector: any, prop?: any): Observable<any>;\n    addReducer(): void;\n    removeReducer(): void;\n    /**\n     * Refreshes the existing state.\n     */\n    refreshState(): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;AAmBA;"}