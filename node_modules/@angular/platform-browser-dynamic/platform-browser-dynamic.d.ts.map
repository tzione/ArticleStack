{"version":3,"file":"platform-browser-dynamic.d.ts","sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@angular/platform-browser-dynamic/platform-browser-dynamic.d.ts"],"sourcesContent":["/**\n * @license Angular v8.2.13\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { CompileMetadataResolver } from '@angular/compiler';\nimport { Compiler } from '@angular/core';\nimport { CompilerConfig } from '@angular/compiler';\nimport { CompileReflector } from '@angular/compiler';\nimport { CompilerFactory } from '@angular/core';\nimport { CompilerOptions } from '@angular/core';\nimport { ComponentFactory } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { JitEvaluator } from '@angular/compiler';\nimport { ModuleWithComponentFactories } from '@angular/core';\nimport { NgModuleCompiler } from '@angular/compiler';\nimport { NgModuleFactory } from '@angular/core';\nimport { PlatformRef } from '@angular/core';\nimport { Provider } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport { StaticProvider } from '@angular/core';\nimport { StyleCompiler } from '@angular/compiler';\nimport { SummaryResolver } from '@angular/compiler';\nimport { TemplateParser } from '@angular/compiler';\nimport { Type } from '@angular/core';\nimport { Version } from '@angular/core';\nimport { ViewCompiler } from '@angular/compiler';\nimport { ɵConsole } from '@angular/core';\n\n/**\n * @publicApi\n */\nexport declare class JitCompilerFactory implements CompilerFactory {\n    private _defaultOptions;\n    createCompiler(options?: CompilerOptions[]): Compiler;\n}\n\n/**\n * @publicApi\n */\nexport declare const platformBrowserDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n\n/**\n * @publicApi\n */\nexport declare const RESOURCE_CACHE_PROVIDER: Provider[];\n\n/**\n * @publicApi\n */\nexport declare const VERSION: Version;\n\n/**\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n * ResourceLoader.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n *\n * @publicApi\n */\nexport declare class ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a extends ResourceLoader {\n    private _cache;\n    constructor();\n    get(url: string): Promise<string>;\n}\n\nexport declare class ɵCompilerImpl implements Compiler {\n    private _metadataResolver;\n    private _delegate;\n    readonly injector: Injector;\n    constructor(injector: Injector, _metadataResolver: CompileMetadataResolver, templateParser: TemplateParser, styleCompiler: StyleCompiler, viewCompiler: ViewCompiler, ngModuleCompiler: NgModuleCompiler, summaryResolver: SummaryResolver<Type<any>>, compileReflector: CompileReflector, jitEvaluator: JitEvaluator, compilerConfig: CompilerConfig, console: ɵConsole);\n    private getExtraNgModuleProviders;\n    compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n    compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n    compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n    compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n    loadAotSummaries(summaries: () => any[]): void;\n    hasAotSummary(ref: Type<any>): boolean;\n    getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n    clearCache(): void;\n    clearCacheFor(type: Type<any>): void;\n    getModuleId(moduleType: Type<any>): string | undefined;\n}\n\n/**\n * @publicApi\n */\nexport declare const ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: StaticProvider[];\n\n/**\n * A platform that included corePlatform and the compiler.\n *\n * @publicApi\n */\nexport declare const ɵplatformCoreDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n\nexport declare class ɵResourceLoaderImpl extends ResourceLoader {\n    get(url: string): Promise<string>;\n}\n\nexport { }\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}