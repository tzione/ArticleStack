/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/common'), require('@angular/material/core'),require('@angular/core'),require('@angular/material/core'),require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('@angular/material/divider', ['exports', '@angular/core', '@angular/cdk/coercion', '@angular/common', '@angular/material/core','@angular/core','@angular/material/core','@angular/common'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.divider = {}),global.ng.core,global.ng.cdk.coercion,global.ng.common,global.ng.material.core,global.ng.core,global.ng.material/core,global.ng.common));
}(this, (function (exports,core,coercion,common,core$1,ɵngcc0,ɵngcc1,ɵngcc2) { 
const _c0 = ["role", "separator", 1, "mat-divider"];
'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatDivider = /** @class */ (function () {
    function MatDivider() {
        this._vertical = false;
        this._inset = false;
    }
    Object.defineProperty(MatDivider.prototype, "vertical", {
        /** Whether the divider is vertically aligned. */
        get: /**
         * Whether the divider is vertically aligned.
         * @return {?}
         */
        function () { return this._vertical; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._vertical = coercion.coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatDivider.prototype, "inset", {
        /** Whether the divider is an inset divider. */
        get: /**
         * Whether the divider is an inset divider.
         * @return {?}
         */
        function () { return this._inset; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._inset = coercion.coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    MatDivider.propDecorators = {
        vertical: [{ type: core.Input }],
        inset: [{ type: core.Input }]
    };
MatDivider.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: MatDivider, selectors: [["mat-divider"]], factory: function MatDivider_Factory(t) { return new (t || MatDivider)(); }, hostBindings: function MatDivider_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(4);
        ɵngcc0.ɵɵelementHostAttrs(_c0);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-orientation", ctx.vertical ? "vertical" : "horizontal");
        ɵngcc0.ɵɵclassProp("mat-divider-vertical", ctx.vertical);
        ɵngcc0.ɵɵclassProp("mat-divider-horizontal", !ctx.vertical);
        ɵngcc0.ɵɵclassProp("mat-divider-inset", ctx.inset);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { vertical: "vertical", inset: "inset" }, consts: 0, vars: 0, template: function MatDivider_Template(rf, ctx) { }, styles: [".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatDivider, [{
        type: core.Component,
        args: [{ selector: 'mat-divider',
                host: {
                    'role': 'separator',
                    '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                    '[class.mat-divider-vertical]': 'vertical',
                    '[class.mat-divider-horizontal]': '!vertical',
                    '[class.mat-divider-inset]': 'inset',
                    'class': 'mat-divider'
                },
                template: '',
                styles: [".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}"],
                encapsulation: core.ViewEncapsulation.None,
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { _vertical: [], _inset: [], vertical: [{
            type: core.Input
        }], vertical: [], inset: [{
            type: core.Input
        }], inset: [] });
    return MatDivider;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatDividerModule = /** @class */ (function () {
    function MatDividerModule() {
    }
MatDividerModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: MatDividerModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(MatDividerModule, { declarations: [MatDivider], imports: [ɵngcc1.MatCommonModule, ɵngcc2.CommonModule], exports: [MatDivider, ɵngcc1.MatCommonModule] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatDividerModule, [{
        type: core.NgModule,
        args: [{
                imports: [core$1.MatCommonModule, common.CommonModule],
                exports: [MatDivider, core$1.MatCommonModule],
                declarations: [MatDivider]
            }]
    }], function () { return []; }, null);
MatDividerModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function MatDividerModule_Factory(t) { return new (t || MatDividerModule)(); }, imports: [[core$1.MatCommonModule, common.CommonModule], ɵngcc1.MatCommonModule] });
    return MatDividerModule;
}());

exports.MatDivider = MatDivider;
exports.MatDividerModule = MatDividerModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=material-divider.umd.js.map