{"version":3,"sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@angular/material/bundles/material-divider.umd.js"],"names":[],"mappings":"AAAA;;;;;;;;gSAQ0M;8OACvB;8PACmB;2EAChJ;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAwCnD,AAgBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAIA;;;;;;;;;;KAUD;;;;;;;;;;;wOAOC","file":"material-divider.umd.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/common'), require('@angular/material/core')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/material/divider', ['exports', '@angular/core', '@angular/cdk/coercion', '@angular/common', '@angular/material/core'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.divider = {}),global.ng.core,global.ng.cdk.coercion,global.ng.common,global.ng.material.core));\n}(this, (function (exports,core,coercion,common,core$1) { 'use strict';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatDivider = /** @class */ (function () {\n    function MatDivider() {\n        this._vertical = false;\n        this._inset = false;\n    }\n    Object.defineProperty(MatDivider.prototype, \"vertical\", {\n        /** Whether the divider is vertically aligned. */\n        get: /**\n         * Whether the divider is vertically aligned.\n         * @return {?}\n         */\n        function () { return this._vertical; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._vertical = coercion.coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDivider.prototype, \"inset\", {\n        /** Whether the divider is an inset divider. */\n        get: /**\n         * Whether the divider is an inset divider.\n         * @return {?}\n         */\n        function () { return this._inset; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._inset = coercion.coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    MatDivider.decorators = [\n        { type: core.Component, args: [{selector: 'mat-divider',\n                    host: {\n                        'role': 'separator',\n                        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                        '[class.mat-divider-vertical]': 'vertical',\n                        '[class.mat-divider-horizontal]': '!vertical',\n                        '[class.mat-divider-inset]': 'inset',\n                        'class': 'mat-divider'\n                    },\n                    template: '',\n                    styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\"],\n                    encapsulation: core.ViewEncapsulation.None,\n                    changeDetection: core.ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    MatDivider.propDecorators = {\n        vertical: [{ type: core.Input }],\n        inset: [{ type: core.Input }]\n    };\n    return MatDivider;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatDividerModule = /** @class */ (function () {\n    function MatDividerModule() {\n    }\n    MatDividerModule.decorators = [\n        { type: core.NgModule, args: [{\n                    imports: [core$1.MatCommonModule, common.CommonModule],\n                    exports: [MatDivider, core$1.MatCommonModule],\n                    declarations: [MatDivider],\n                },] },\n    ];\n    return MatDividerModule;\n}());\n\nexports.MatDivider = MatDivider;\nexports.MatDividerModule = MatDividerModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}