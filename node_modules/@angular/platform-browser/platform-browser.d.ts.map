{"version":3,"file":"platform-browser.d.ts","sources":["c:/Users/tzion/OneDrive/מסמכים/Private/ArticleStack-master/ArticleStack-master/node_modules/@angular/platform-browser/platform-browser.d.ts"],"sourcesContent":["/**\n * @license Angular v8.2.13\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ComponentRef } from '@angular/core';\nimport { DebugElement } from '@angular/core';\nimport { DebugNode } from '@angular/core';\nimport { ErrorHandler } from '@angular/core';\nimport { GetTestability } from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { LocationChangeListener } from '@angular/common';\nimport { ModuleWithProviders } from '@angular/core';\nimport { NgProbeToken } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { PlatformLocation } from '@angular/common';\nimport { PlatformRef } from '@angular/core';\nimport { Predicate } from '@angular/core';\nimport { Provider } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { RendererFactory2 } from '@angular/core';\nimport { RendererType2 } from '@angular/core';\nimport { Sanitizer } from '@angular/core';\nimport { SecurityContext } from '@angular/core';\nimport { StaticProvider } from '@angular/core';\nimport { Testability } from '@angular/core';\nimport { TestabilityRegistry } from '@angular/core';\nimport { Type } from '@angular/core';\nimport { Version } from '@angular/core';\nimport { ɵConsole } from '@angular/core';\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nexport declare class BrowserModule {\n    constructor(parentModule: BrowserModule | null);\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params: {\n        appId: string;\n    }): ModuleWithProviders<BrowserModule>;\n}\n\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\nexport declare class BrowserTransferStateModule {\n}\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport declare class By {\n    /**\n     * Match all nodes.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     */\n    static all(): Predicate<DebugNode>;\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     */\n    static css(selector: string): Predicate<DebugElement>;\n    /**\n     * Match nodes that have the given directive present.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     */\n    static directive(type: Type<any>): Predicate<DebugNode>;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport declare function disableDebugTools(): void;\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nexport declare abstract class DomSanitizer implements Sanitizer {\n    /**\n     * Sanitizes a value for use in the given SecurityContext.\n     *\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n     * is responsible to make sure that the value can definitely be safely used in the given context.\n     */\n    abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n    /**\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n     * leave safe HTML intact, so in most situations this method should not be used.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n    /**\n     * Bypass security and trust the given value to be safe style value (CSS).\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n    /**\n     * Bypass security and trust the given value to be safe JavaScript.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustScript(value: string): SafeScript;\n    /**\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n     * in hyperlinks or `<img src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n    /**\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport declare function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport declare const EVENT_MANAGER_PLUGINS: InjectionToken<ɵangular_packages_platform_browser_platform_browser_g[]>;\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nexport declare class EventManager {\n    private _zone;\n    private _plugins;\n    private _eventNameToPlugin;\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    constructor(plugins: ɵangular_packages_platform_browser_platform_browser_g[], _zone: NgZone);\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     */\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    getZone(): NgZone;\n}\n\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @publicApi\n */\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\n\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nexport declare class HammerGestureConfig {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     */\n    events: string[];\n    /**\n    * Maps gesture event names to a set of configuration options\n    * that specify overrides to the default values for specific properties.\n    *\n    * The key is a supported event name to be configured,\n    * and the options object contains a set of properties, with override values\n    * to be applied to the named recognizer event.\n    * For example, to disable recognition of the rotate event, specify\n    *  `{\"rotate\": {\"enable\": false}}`.\n    *\n    * Properties that are not present take the HammerJS default values.\n    * For information about which properties are supported for which events,\n    * and their allowed and default values, see\n    * [HammerJS documentation](http://hammerjs.github.io/).\n    *\n    */\n    overrides: {\n        [key: string]: Object;\n    };\n    /**\n     * Properties whose default values can be overridden for a given event.\n     * Different sets of properties apply to different events.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](http://hammerjs.github.io/).\n     */\n    options?: {\n        cssProps?: any;\n        domEvents?: boolean;\n        enable?: boolean | ((manager: any) => boolean);\n        preset?: any[];\n        touchAction?: string;\n        recognizers?: any[];\n        inputClass?: any;\n        inputTarget?: EventTarget;\n    };\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n}\n\ndeclare interface HammerInstance {\n    on(eventName: string, callback?: Function): void;\n    off(eventName: string, callback?: Function): void;\n    destroy?(): void;\n}\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport declare type HammerLoader = () => Promise<void>;\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport declare function makeStateKey<T = void>(key: string): StateKey<T>;\n\n/**\n * A service that can be used to get and add meta tags.\n *\n * @publicApi\n */\nexport declare class Meta {\n    private _doc;\n    private _dom;\n    constructor(_doc: any);\n    addTag(tag: MetaDefinition, forceCreation?: boolean): HTMLMetaElement | null;\n    addTags(tags: MetaDefinition[], forceCreation?: boolean): HTMLMetaElement[];\n    getTag(attrSelector: string): HTMLMetaElement | null;\n    getTags(attrSelector: string): HTMLMetaElement[];\n    updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\n    removeTag(attrSelector: string): void;\n    removeTagElement(meta: HTMLMetaElement): void;\n    private _getOrCreateElement;\n    private _setMetaElementAttributes;\n    private _parseSelector;\n    private _containsAttributes;\n}\n\n\n/**\n * Represents a meta element.\n *\n * @publicApi\n */\nexport declare type MetaDefinition = {\n    charset?: string;\n    content?: string;\n    httpEquiv?: string;\n    id?: string;\n    itemprop?: string;\n    name?: string;\n    property?: string;\n    scheme?: string;\n    url?: string;\n} & {\n    [prop: string]: string;\n};\n\n/**\n * @publicApi\n */\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport declare interface SafeHtml extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport declare interface SafeResourceUrl extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport declare interface SafeScript extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport declare interface SafeStyle extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport declare interface SafeUrl extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport declare interface SafeValue {\n}\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport declare type StateKey<T> = string & {\n    __not_a_string: never;\n};\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nexport declare class Title {\n    private _doc;\n    constructor(_doc: any);\n    /**\n     * Get the title of the current HTML document.\n     */\n    getTitle(): string;\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    setTitle(newTitle: string): void;\n}\n\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * @publicApi\n */\nexport declare class TransferState {\n    private store;\n    private onSerializeCallbacks;\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    get<T>(key: StateKey<T>, defaultValue: T): T;\n    /**\n     * Set the value corresponding to a key.\n     */\n    set<T>(key: StateKey<T>, value: T): void;\n    /**\n     * Remove a key from the store.\n     */\n    remove<T>(key: StateKey<T>): void;\n    /**\n     * Test whether a key exists in the store.\n     */\n    hasKey<T>(key: StateKey<T>): boolean;\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    onSerialize<T>(key: StateKey<T>, callback: () => T): void;\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    toJson(): string;\n}\n\n/**\n * @publicApi\n */\nexport declare const VERSION: Version;\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_a(): ErrorHandler;\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_b(): any;\n\nexport declare const ɵangular_packages_platform_browser_platform_browser_c: StaticProvider[];\n\n/**\n * Factory to create Meta service.\n */\nexport declare function ɵangular_packages_platform_browser_platform_browser_d(): Meta;\n\n\n/**\n * Factory to create Title service.\n */\nexport declare function ɵangular_packages_platform_browser_platform_browser_e(): Title;\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_f(doc: Document, appId: string): TransferState;\n\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_g {\n    private _doc;\n    constructor(_doc: any);\n    manager: EventManager;\n    abstract supports(eventName: string): boolean;\n    abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\n}\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_h(transitionId: string, document: any, injector: Injector): () => void;\n\nexport declare const ɵangular_packages_platform_browser_platform_browser_i: StaticProvider[];\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_j(coreTokens: NgProbeToken[]): any;\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport declare const ɵangular_packages_platform_browser_platform_browser_k: Provider[];\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_l extends ɵDomAdapter {\n    private _animationPrefix;\n    private _transitionEnd;\n    constructor();\n    getDistributedNodes(el: HTMLElement): Node[];\n    resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string): void;\n    supportsDOMEvents(): boolean;\n    supportsNativeShadowDOM(): boolean;\n    getAnimationPrefix(): string;\n    getTransitionEnd(): string;\n    supportsAnimation(): boolean;\n}\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport declare const ɵBROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare class ɵBrowserDomAdapter extends ɵangular_packages_platform_browser_platform_browser_l {\n    parse(templateHtml: string): void;\n    static makeCurrent(): void;\n    hasProperty(element: Node, name: string): boolean;\n    setProperty(el: Node, name: string, value: any): void;\n    getProperty(el: Node, name: string): any;\n    invoke(el: Node, methodName: string, args: any[]): any;\n    logError(error: string): void;\n    log(error: string): void;\n    logGroup(error: string): void;\n    logGroupEnd(): void;\n    readonly attrToPropMap: any;\n    contains(nodeA: any, nodeB: any): boolean;\n    querySelector(el: HTMLElement, selector: string): any;\n    querySelectorAll(el: any, selector: string): any[];\n    on(el: Node, evt: any, listener: any): void;\n    onAndCancel(el: Node, evt: any, listener: any): Function;\n    dispatchEvent(el: Node, evt: any): void;\n    createMouseEvent(eventType: string): MouseEvent;\n    createEvent(eventType: any): Event;\n    preventDefault(evt: Event): void;\n    isPrevented(evt: Event): boolean;\n    getInnerHTML(el: HTMLElement): string;\n    getTemplateContent(el: Node): Node | null;\n    getOuterHTML(el: HTMLElement): string;\n    nodeName(node: Node): string;\n    nodeValue(node: Node): string | null;\n    type(node: HTMLInputElement): string;\n    content(node: Node): Node;\n    firstChild(el: Node): Node | null;\n    nextSibling(el: Node): Node | null;\n    parentElement(el: Node): Node | null;\n    childNodes(el: any): Node[];\n    childNodesAsList(el: Node): any[];\n    clearNodes(el: Node): void;\n    appendChild(el: Node, node: Node): void;\n    removeChild(el: Node, node: Node): void;\n    replaceChild(el: Node, newChild: Node, oldChild: Node): void;\n    remove(node: Node): Node;\n    insertBefore(parent: Node, ref: Node, node: Node): void;\n    insertAllBefore(parent: Node, ref: Node, nodes: Node[]): void;\n    insertAfter(parent: Node, ref: Node, node: any): void;\n    setInnerHTML(el: Element, value: string): void;\n    getText(el: Node): string | null;\n    setText(el: Node, value: string): void;\n    getValue(el: any): string;\n    setValue(el: any, value: string): void;\n    getChecked(el: any): boolean;\n    setChecked(el: any, value: boolean): void;\n    createComment(text: string): Comment;\n    createTemplate(html: any): HTMLElement;\n    createElement(tagName: string, doc?: Document): HTMLElement;\n    createElementNS(ns: string, tagName: string, doc?: Document): Element;\n    createTextNode(text: string, doc?: Document): Text;\n    createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement;\n    createStyleElement(css: string, doc?: Document): HTMLStyleElement;\n    createShadowRoot(el: HTMLElement): DocumentFragment;\n    getShadowRoot(el: HTMLElement): DocumentFragment;\n    getHost(el: HTMLElement): HTMLElement;\n    clone(node: Node): Node;\n    getElementsByClassName(element: any, name: string): HTMLElement[];\n    getElementsByTagName(element: any, name: string): HTMLElement[];\n    classList(element: any): any[];\n    addClass(element: any, className: string): void;\n    removeClass(element: any, className: string): void;\n    hasClass(element: any, className: string): boolean;\n    setStyle(element: any, styleName: string, styleValue: string): void;\n    removeStyle(element: any, stylename: string): void;\n    getStyle(element: any, stylename: string): string;\n    hasStyle(element: any, styleName: string, styleValue?: string | null): boolean;\n    tagName(element: any): string;\n    attributeMap(element: any): Map<string, string>;\n    hasAttribute(element: Element, attribute: string): boolean;\n    hasAttributeNS(element: Element, ns: string, attribute: string): boolean;\n    getAttribute(element: Element, attribute: string): string | null;\n    getAttributeNS(element: Element, ns: string, name: string): string | null;\n    setAttribute(element: Element, name: string, value: string): void;\n    setAttributeNS(element: Element, ns: string, name: string, value: string): void;\n    removeAttribute(element: Element, attribute: string): void;\n    removeAttributeNS(element: Element, ns: string, name: string): void;\n    templateAwareRoot(el: Node): any;\n    createHtmlDocument(): HTMLDocument;\n    getDefaultDocument(): Document;\n    getBoundingClientRect(el: Element): any;\n    getTitle(doc: Document): string;\n    setTitle(doc: Document, newTitle: string): void;\n    elementMatches(n: any, selector: string): boolean;\n    isTemplateElement(el: Node): boolean;\n    isTextNode(node: Node): boolean;\n    isCommentNode(node: Node): boolean;\n    isElementNode(node: Node): boolean;\n    hasShadowRoot(node: any): boolean;\n    isShadowRoot(node: any): boolean;\n    importIntoDoc(node: Node): any;\n    adoptNode(node: Node): any;\n    getHref(el: Element): string;\n    getEventKey(event: any): string;\n    getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\n    getHistory(): History;\n    getLocation(): Location;\n    getBaseHref(doc: Document): string | null;\n    resetBaseElement(): void;\n    getUserAgent(): string;\n    setData(element: Element, name: string, value: string): void;\n    getData(element: Element, name: string): string | null;\n    getComputedStyle(element: any): any;\n    supportsWebAnimation(): boolean;\n    performanceNow(): number;\n    supportsCookies(): boolean;\n    getCookie(name: string): string | null;\n    setCookie(name: string, value: string): void;\n}\n\nexport declare class ɵBrowserGetTestability implements GetTestability {\n    static init(): void;\n    addToWindow(registry: TestabilityRegistry): void;\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\nexport declare class ɵBrowserPlatformLocation extends PlatformLocation {\n    private _doc;\n    readonly location: Location;\n    private _history;\n    constructor(_doc: any);\n    getBaseHrefFromDOM(): string;\n    onPopState(fn: LocationChangeListener): void;\n    onHashChange(fn: LocationChangeListener): void;\n    readonly href: string;\n    readonly protocol: string;\n    readonly hostname: string;\n    readonly port: string;\n    pathname: string;\n    readonly search: string;\n    readonly hash: string;\n    pushState(state: any, title: string, url: string): void;\n    replaceState(state: any, title: string, url: string): void;\n    forward(): void;\n    back(): void;\n    getState(): unknown;\n}\n\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare abstract class ɵDomAdapter {\n    resourceLoaderType: Type<any>;\n    abstract hasProperty(element: any, name: string): boolean;\n    abstract setProperty(el: Element, name: string, value: any): any;\n    abstract getProperty(el: Element, name: string): any;\n    abstract invoke(el: Element, methodName: string, args: any[]): any;\n    abstract logError(error: any): any;\n    abstract log(error: any): any;\n    abstract logGroup(error: any): any;\n    abstract logGroupEnd(): any;\n    /**\n     * Maps attribute names to their corresponding property names for cases\n     * where attribute name doesn't match property name.\n     */\n    attrToPropMap: {\n        [key: string]: string;\n    };\n    abstract contains(nodeA: any, nodeB: any): boolean;\n    abstract parse(templateHtml: string): any;\n    abstract querySelector(el: any, selector: string): any;\n    abstract querySelectorAll(el: any, selector: string): any[];\n    abstract on(el: any, evt: any, listener: any): any;\n    abstract onAndCancel(el: any, evt: any, listener: any): Function;\n    abstract dispatchEvent(el: any, evt: any): any;\n    abstract createMouseEvent(eventType: any): any;\n    abstract createEvent(eventType: string): any;\n    abstract preventDefault(evt: any): any;\n    abstract isPrevented(evt: any): boolean;\n    abstract getInnerHTML(el: any): string;\n    /** Returns content if el is a <template> element, null otherwise. */\n    abstract getTemplateContent(el: any): any;\n    abstract getOuterHTML(el: any): string;\n    abstract nodeName(node: any): string;\n    abstract nodeValue(node: any): string | null;\n    abstract type(node: any): string;\n    abstract content(node: any): any;\n    abstract firstChild(el: any): Node | null;\n    abstract nextSibling(el: any): Node | null;\n    abstract parentElement(el: any): Node | null;\n    abstract childNodes(el: any): Node[];\n    abstract childNodesAsList(el: any): Node[];\n    abstract clearNodes(el: any): any;\n    abstract appendChild(el: any, node: any): any;\n    abstract removeChild(el: any, node: any): any;\n    abstract replaceChild(el: any, newNode: any, oldNode: any): any;\n    abstract remove(el: any): Node;\n    abstract insertBefore(parent: any, ref: any, node: any): any;\n    abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\n    abstract insertAfter(parent: any, el: any, node: any): any;\n    abstract setInnerHTML(el: any, value: any): any;\n    abstract getText(el: any): string | null;\n    abstract setText(el: any, value: string): any;\n    abstract getValue(el: any): string;\n    abstract setValue(el: any, value: string): any;\n    abstract getChecked(el: any): boolean;\n    abstract setChecked(el: any, value: boolean): any;\n    abstract createComment(text: string): any;\n    abstract createTemplate(html: any): HTMLElement;\n    abstract createElement(tagName: any, doc?: any): HTMLElement;\n    abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\n    abstract createTextNode(text: string, doc?: any): Text;\n    abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\n    abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\n    abstract createShadowRoot(el: any): any;\n    abstract getShadowRoot(el: any): any;\n    abstract getHost(el: any): any;\n    abstract getDistributedNodes(el: any): Node[];\n    abstract clone(node: Node): Node;\n    abstract getElementsByClassName(element: any, name: string): HTMLElement[];\n    abstract getElementsByTagName(element: any, name: string): HTMLElement[];\n    abstract classList(element: any): any[];\n    abstract addClass(element: any, className: string): any;\n    abstract removeClass(element: any, className: string): any;\n    abstract hasClass(element: any, className: string): boolean;\n    abstract setStyle(element: any, styleName: string, styleValue: string): any;\n    abstract removeStyle(element: any, styleName: string): any;\n    abstract getStyle(element: any, styleName: string): string;\n    abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\n    abstract tagName(element: any): string;\n    abstract attributeMap(element: any): Map<string, string>;\n    abstract hasAttribute(element: any, attribute: string): boolean;\n    abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\n    abstract getAttribute(element: any, attribute: string): string | null;\n    abstract getAttributeNS(element: any, ns: string, attribute: string): string | null;\n    abstract setAttribute(element: any, name: string, value: string): any;\n    abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\n    abstract removeAttribute(element: any, attribute: string): any;\n    abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\n    abstract templateAwareRoot(el: any): any;\n    abstract createHtmlDocument(): HTMLDocument;\n    abstract getDefaultDocument(): Document;\n    abstract getBoundingClientRect(el: any): any;\n    abstract getTitle(doc: Document): string;\n    abstract setTitle(doc: Document, newTitle: string): any;\n    abstract elementMatches(n: any, selector: string): boolean;\n    abstract isTemplateElement(el: any): boolean;\n    abstract isTextNode(node: any): boolean;\n    abstract isCommentNode(node: any): boolean;\n    abstract isElementNode(node: any): boolean;\n    abstract hasShadowRoot(node: any): boolean;\n    abstract isShadowRoot(node: any): boolean;\n    abstract importIntoDoc(node: Node): Node;\n    abstract adoptNode(node: Node): Node;\n    abstract getHref(element: any): string;\n    abstract getEventKey(event: any): string;\n    abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\n    abstract supportsDOMEvents(): boolean;\n    abstract supportsNativeShadowDOM(): boolean;\n    abstract getGlobalEventTarget(doc: Document, target: string): any;\n    abstract getHistory(): History;\n    abstract getLocation(): Location;\n    abstract getBaseHref(doc: Document): string | null;\n    abstract resetBaseElement(): void;\n    abstract getUserAgent(): string;\n    abstract setData(element: any, name: string, value: string): any;\n    abstract getComputedStyle(element: any): any;\n    abstract getData(element: any, name: string): string | null;\n    abstract supportsWebAnimation(): boolean;\n    abstract performanceNow(): number;\n    abstract getAnimationPrefix(): string;\n    abstract getTransitionEnd(): string;\n    abstract supportsAnimation(): boolean;\n    abstract supportsCookies(): boolean;\n    abstract getCookie(name: string): string | null;\n    abstract setCookie(name: string, value: string): any;\n}\n\nexport declare class ɵDomEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\n    private ngZone;\n    constructor(doc: any, ngZone: NgZone, platformId: {} | null);\n    private patchEvent;\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    removeEventListener(target: any, eventName: string, callback: Function): void;\n}\n\nexport declare class ɵDomRendererFactory2 implements RendererFactory2 {\n    private eventManager;\n    private sharedStylesHost;\n    private appId;\n    private rendererByCompId;\n    private defaultRenderer;\n    constructor(eventManager: EventManager, sharedStylesHost: ɵDomSharedStylesHost, appId: string);\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\n    begin(): void;\n    end(): void;\n}\n\nexport declare class ɵDomSanitizerImpl extends DomSanitizer {\n    private _doc;\n    constructor(_doc: any);\n    sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null;\n    private checkNotSafeValue;\n    bypassSecurityTrustHtml(value: string): SafeHtml;\n    bypassSecurityTrustStyle(value: string): SafeStyle;\n    bypassSecurityTrustScript(value: string): SafeScript;\n    bypassSecurityTrustUrl(value: string): SafeUrl;\n    bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport declare class ɵDomSharedStylesHost extends ɵSharedStylesHost implements OnDestroy {\n    private _doc;\n    private _hostNodes;\n    private _styleNodes;\n    constructor(_doc: any);\n    private _addStylesToHost;\n    addHost(hostNode: Node): void;\n    removeHost(hostNode: Node): void;\n    onStylesAdded(additions: Set<string>): void;\n    ngOnDestroy(): void;\n}\n\nexport declare const ɵELEMENT_PROBE_PROVIDERS: Provider[];\n\n/**\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\n * with more robust functionality.\n *\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\n * tree-shaking properly.\n */\nexport declare const ɵELEMENT_PROBE_PROVIDERS__POST_R3__: never[];\n\n\nexport declare function ɵescapeHtml(text: string): string;\n\nexport declare function ɵflattenStyles(compId: string, styles: Array<any | any[]>, target: string[]): string[];\n\nexport declare function ɵgetDOM(): ɵDomAdapter;\n\nexport declare class ɵHammerGesturesPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\n    private _config;\n    private console;\n    private loader?;\n    constructor(doc: any, _config: HammerGestureConfig, console: ɵConsole, loader?: HammerLoader | null | undefined);\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    isCustomEvent(eventName: string): boolean;\n}\n\nexport declare function ɵinitDomAdapter(): void;\n\nexport declare const ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nexport declare class ɵKeyEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    constructor(doc: any);\n    /**\n      * Reports whether a named key event is supported.\n      * @param eventName The event name to query.\n      * @return True if the named key event is supported.\n     */\n    supports(eventName: string): boolean;\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n    */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    static parseEventName(eventName: string): {\n        [key: string]: string;\n    } | null;\n    static getEventFullKey(event: KeyboardEvent): string;\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;\n}\n\nexport declare const ɵNAMESPACE_URIS: {\n    [ns: string]: string;\n};\n\nexport declare function ɵsetRootDomAdapter(adapter: ɵDomAdapter): void;\n\nexport declare class ɵSharedStylesHost {\n    addStyles(styles: string[]): void;\n    onStylesAdded(additions: Set<string>): void;\n    getAllStyles(): string[];\n}\n\nexport declare function ɵshimContentAttribute(componentShortId: string): string;\n\nexport declare function ɵshimHostAttribute(componentShortId: string): string;\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport declare const ɵTRANSITION_ID: InjectionToken<unknown>;\n\nexport { }\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;;;;;;;;;AAaA;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAm}